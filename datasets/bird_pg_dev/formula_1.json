[
  {
    "db_id": "formula_1",
    "question_id": 846,
    "difficulty": "moderate",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 18.",
    "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
    "SQLite_query": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 18 ORDER BY T1.q1 DESC LIMIT 5",
    "Postgres_query": "SELECT \"T2\".\"driverRef\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 18 ORDER BY \"T1\".\"q1\" DESC NULLS LAST LIMIT 5",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 847,
    "difficulty": "simple",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second period?",
    "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
    "SQLite_query": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL ORDER BY T1.q2 ASC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"surname\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 19 AND \"T1\".\"q2\" IS NOT NULL ORDER BY \"T1\".\"q2\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 848,
    "difficulty": "simple",
    "question": "Please list the year during which the race is held on circuits in Shanghai.",
    "evidence": "Shanghai is a name of location;",
    "SQLite_query": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "Postgres_query": "SELECT to_char(\"T2\".\"year\"::timestamp, 'YYYY') FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"location\" = 'Shanghai'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 849,
    "difficulty": "simple",
    "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "SQLite_query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"url\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Circuit de Barcelona-Catalunya'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 850,
    "difficulty": "simple",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "evidence": "Germany is a name of country;",
    "SQLite_query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"name\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"country\" = 'Germany'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 851,
    "difficulty": "simple",
    "question": "Please list the positions of the circuits built by the constructor Renault.",
    "evidence": "Renault is a name of constructor;",
    "SQLite_query": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"position\" FROM \"constructorStandings\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T2\".\"constructorId\" = \"T1\".\"constructorId\" WHERE \"T2\".\"name\" = 'Renault'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 852,
    "difficulty": "moderate",
    "question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010",
    "Postgres_query": "SELECT COUNT(\"T3\".\"raceId\") FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T3\" ON \"T3\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"country\" NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND \"T3\".\"year\" = 2010",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 853,
    "difficulty": "simple",
    "question": "Please give the names of the races held on the circuits in Spain.",
    "evidence": "Spain is a name of country;",
    "SQLite_query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"name\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"country\" = 'Spain'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 854,
    "difficulty": "simple",
    "question": "What is the location coordinates of the circuits for Australian grand prix?",
    "evidence": "coordinates refers to (lat, lng);",
    "SQLite_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"lat\", \"T1\".\"lng\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"name\" = 'Australian Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 855,
    "difficulty": "simple",
    "question": "Where can I find the information about the races held on Sepang International Circuit?",
    "evidence": "information about races refers to url;",
    "SQLite_query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"url\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Sepang International Circuit'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 856,
    "difficulty": "simple",
    "question": "Please list the time of the races held on Sepang International Circuit.",
    "evidence": "",
    "SQLite_query": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"time\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Sepang International Circuit'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 857,
    "difficulty": "simple",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "evidence": "coordinates refers to (lat, lng); position and location shares the same meaning.",
    "SQLite_query": "SELECT DISTINCT T1.lat, T1.lng, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"lat\", \"T1\".\"lng\", \"T1\".\"location\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"name\" = 'Abu Dhabi Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 858,
    "difficulty": "simple",
    "question": "Which country is the constructor which got 1 point in the race No. 24 from?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
    "Postgres_query": "SELECT \"T2\".\"nationality\" FROM \"constructorResults\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T2\".\"constructorId\" = \"T1\".\"constructorId\" WHERE \"T1\".\"raceId\" = 24 AND \"T1\".\"points\" = 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 859,
    "difficulty": "simple",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "Postgres_query": "SELECT \"T1\".\"q1\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 354 AND \"T2\".\"forename\" = 'Bruno' AND \"T2\".\"surname\" = 'Senna'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 860,
    "difficulty": "simple",
    "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"nationality\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 355 AND \"T1\".\"q2\"::text LIKE '1:40%'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 861,
    "difficulty": "simple",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "Postgres_query": "SELECT \"T2\".\"number\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 903 AND \"T1\".\"q3\"::text LIKE '1:54%'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 862,
    "difficulty": "simple",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "evidence": "drivers who finished the race refers to time has records;",
    "SQLite_query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "Postgres_query": "SELECT COUNT(\"T3\".\"driverId\") FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"year\" = 2007 AND \"T1\".\"name\" = 'Bahrain Grand Prix' AND \"T2\".\"time\" IS NULL",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 863,
    "difficulty": "simple",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "Postgres_query": "SELECT \"T2\".\"url\" FROM \"races\" AS \"T1\" INNER JOIN \"seasons\" AS \"T2\" ON \"T2\".\"year\" = \"T1\".\"year\" WHERE \"T1\".\"raceId\" = 901",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 864,
    "difficulty": "simple",
    "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
    "evidence": "game and race are synonyms; drivers who finished the race should have record in time;",
    "SQLite_query": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
    "Postgres_query": "SELECT count(\"T2\".\"driverId\") FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" WHERE \"T1\".\"date\" = '2015-11-29' AND \"T2\".\"time\" IS NOT NULL",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 865,
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "evidence": "drivers who finished the race refers to time is not empty; oldest driver refers to oldest dob;",
    "SQLite_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"forename\", \"T1\".\"surname\" FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T2\".\"raceId\" = 592 AND \"T2\".\"time\" IS NOT NULL AND \"T1\".\"dob\" IS NOT NULL ORDER BY \"T1\".\"dob\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 866,
    "difficulty": "moderate",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "evidence": "player and driver are synonyms; race number refers to raceId; introduction website of the drivers refers to url;",
    "SQLite_query": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"forename\", \"T2\".\"surname\", \"T2\".\"url\" FROM \"lapTimes\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 161 AND \"T1\".\"time\"::text LIKE '1:27%'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 867,
    "difficulty": "simple",
    "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
    "evidence": "fastest lap speed refers to MAX(fastestLapSpeed);",
    "SQLite_query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"nationality\" FROM drivers AS \"T1\" INNER JOIN results AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T2\".\"raceId\" = 933 AND \"T2\".\"fastestLapTime\" IS NOT NULL ORDER BY \"T2\".\"fastestLapSpeed\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 868,
    "difficulty": "simple",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "evidence": "coordinates refers to (lat, lng);",
    "SQLite_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"lat\", \"T1\".\"lng\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"name\" = 'Malaysian Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 869,
    "difficulty": "moderate",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "evidence": "race number refers to raceId; introduction website of the constructor refers to url;",
    "SQLite_query": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"url\" FROM \"constructorResults\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T2\".\"constructorId\" = \"T1\".\"constructorId\" WHERE \"T1\".\"raceId\" = 9 ORDER BY \"T1\".\"points\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 870,
    "difficulty": "simple",
    "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
    "Postgres_query": "SELECT \"T1\".\"q1\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 345 AND \"T2\".\"forename\" = 'Lucas' AND \"T2\".\"surname\" = 'di Grassi'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 871,
    "difficulty": "simple",
    "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"nationality\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 347 AND \"T1\".\"q2\"::text LIKE '1:15%'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 872,
    "difficulty": "simple",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "Postgres_query": "SELECT \"T2\".\"code\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 45 AND \"T1\".\"q3\"::text LIKE '1:33%'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 873,
    "difficulty": "simple",
    "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
    "Postgres_query": "SELECT \"T2\".\"time\" FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T2\".\"raceId\" = 743 AND \"T1\".\"forename\" = 'Bruce' AND \"T1\".\"surname\" = 'McLaren'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 874,
    "difficulty": "simple",
    "question": "Who finished second in the San Marino Grand Prix in 2006?",
    "evidence": "finished second refers to position = 2;",
    "SQLite_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
    "Postgres_query": "SELECT \"T3\".\"forename\", \"T3\".\"surname\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"year\" = 2006 AND \"T1\".\"name\" = 'San Marino Grand Prix' AND \"T2\".\"position\" = 2",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 875,
    "difficulty": "simple",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "evidence": "race number refers to raceId;",
    "SQLite_query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "Postgres_query": "SELECT \"T2\".\"url\" FROM \"races\" AS \"T1\" INNER JOIN \"seasons\" AS \"T2\" ON \"T2\".\"year\" = \"T1\".\"year\" WHERE \"T1\".\"raceId\" = 901",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 876,
    "difficulty": "simple",
    "question": "For the race happened in 2015/11/29, how many drivers finished the game?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
    "Postgres_query": "SELECT count(\"T2\".\"driverId\") FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" WHERE \"T1\".\"date\" = '2015-11-29' AND \"T2\".\"time\" IS NOT NULL",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 877,
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
    "SQLite_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"forename\", \"T1\".\"surname\" FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T2\".\"raceId\" = 872 AND \"T2\".\"time\" IS NOT NULL ORDER BY \"T1\".\"dob\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 878,
    "difficulty": "simple",
    "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
    "evidence": "race number refers to raceId; the best lap time refers to MIN(time)",
    "SQLite_query": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"forename\", \"T2\".\"surname\" FROM \"lapTimes\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"raceId\" = 348 ORDER BY \"T1\".\"time\" ASC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 879,
    "difficulty": "moderate",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed\n\nSQL mentions raceId = 348, that is not in the question",
    "SQLite_query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"nationality\" FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T2\".\"fastestLapTime\" IS NOT NULL ORDER BY \"T2\".\"fastestLapSpeed\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 880,
    "difficulty": "challenging",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "evidence": "race number refers to raceId; DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)), (fastestLapSpeed(raceId = 853)) as percentage",
    "SQLite_query": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
    "Postgres_query": "SELECT ((SUM(CASE WHEN \"T2\".\"raceId\" = 853 THEN \"T2\".\"fastestLapSpeed\" ELSE 0 END) - SUM(CASE WHEN \"T2\".\"raceId\" = 854 THEN \"T2\".\"fastestLapSpeed\" ELSE 0 END)) * 100.0) / SUM(CASE WHEN \"T2\".\"raceId\" = 853 THEN \"T2\".\"fastestLapSpeed\" ELSE 0 END) FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"forename\" = 'Paul' AND \"T1\".\"surname\" = 'di Resta'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 881,
    "difficulty": "moderate",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "evidence": "DIVIDE(COUNT(driverid where time has value and date = '1983-07-16'), (COUNT(driverid where date = '1983-07-16')) as percentage",
    "SQLite_query": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
    "Postgres_query": "SELECT (CAST(COUNT(CASE WHEN \"T2\".\"time\" IS NOT NULL THEN \"T2\".\"driverId\" END) AS FLOAT) * 100) / COUNT(\"T2\".\"driverId\") FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" WHERE \"T1\".\"date\" = '1983-07-16'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 882,
    "difficulty": "simple",
    "question": "Which year was the first Singapore Grand Prix?",
    "evidence": "the first race refers to race happened in min(year);",
    "SQLite_query": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
    "Postgres_query": "SELECT \"year\" FROM \"races\" WHERE \"name\" = 'Singapore Grand Prix' ORDER BY \"year\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 883,
    "difficulty": "simple",
    "question": "How many races were there in 2005? Name all the races in descending order.",
    "evidence": "",
    "SQLite_query": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
    "Postgres_query": "SELECT \"name\" FROM \"races\" WHERE \"year\" = 2005 ORDER BY \"name\" DESC NULLS LAST",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 884,
    "difficulty": "moderate",
    "question": "Name the first race recorded. What are the other races that happened within the same month and year of that race.",
    "evidence": "the first race refers to year = year(min(date)) and month = month(min(date));",
    "SQLite_query": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "Postgres_query": "SELECT \"name\" FROM \"races\" WHERE to_char(\"date\"::timestamp, 'YYYY') = ( SELECT to_char(\"date\"::timestamp, 'YYYY') FROM \"races\" ORDER BY \"date\" ASC LIMIT 1 ) AND to_char(\"date\"::timestamp, 'MM') = ( SELECT to_char(\"date\"::timestamp, 'MM') FROM \"races\" ORDER BY \"date\" ASC LIMIT 1 )",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 885,
    "difficulty": "simple",
    "question": "State the name and date of the last round of race in year 1999.",
    "evidence": "the last round refers to max(round);",
    "SQLite_query": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
    "Postgres_query": "SELECT \"name\", \"date\" FROM \"races\" WHERE CAST(strftime('%Y', \"date\") AS INT) = 1999 ORDER BY \"round\" DESC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 886,
    "difficulty": "simple",
    "question": "Which year has the most number of races?",
    "evidence": "the most number of races refers to max(round);",
    "SQLite_query": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
    "Postgres_query": "SELECT to_char(\"year\"::timestamp, 'YYYY') FROM \"races\" GROUP BY to_char(\"year\"::timestamp, 'YYYY') ORDER BY count(\"round\") DESC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 887,
    "difficulty": "simple",
    "question": "Name the races in year 2017 that are not hosted in year 2000.",
    "evidence": "not hosted means not in;",
    "SQLite_query": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
    "Postgres_query": "SELECT \"name\" FROM \"races\" WHERE \"year\" = 2017 AND \"name\" NOT IN ( SELECT \"name\" FROM \"races\" WHERE \"year\" = 2000 )",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 888,
    "difficulty": "simple",
    "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
    "evidence": "the first refers to min(year);",
    "SQLite_query": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"country\", \"T1\".\"location\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"name\" = 'European Grand Prix' ORDER BY \"T2\".\"year\" ASC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 889,
    "difficulty": "simple",
    "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "evidence": "the last refers to max(year);",
    "SQLite_query": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"date\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Brands Hatch' AND \"T2\".\"name\" = 'British Grand Prix' ORDER BY \"T2\".\"year\" DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 890,
    "difficulty": "simple",
    "question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
    "evidence": "British Grand Prix is the name of race; British refers to the United Kindom",
    "SQLite_query": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"circuitid\") FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Silverstone Circuit' AND \"T2\".\"name\" = 'British Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 891,
    "difficulty": "simple",
    "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
    "evidence": "",
    "SQLite_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
    "Postgres_query": "SELECT \"T3\".\"forename\", \"T3\".\"surname\" FROM \"races\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"name\" = 'Singapore Grand Prix' AND \"T1\".\"year\" = 2010 ORDER BY \"T2\".\"position\" ASC NULLS LAST",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 892,
    "difficulty": "moderate",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "evidence": "the most points scored refers to max(points); full name contains forename and surname.",
    "SQLite_query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
    "Postgres_query": "SELECT \"T3\".\"forename\", \"T3\".\"surname\", \"T2\".\"points\" FROM \"races\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" ORDER BY \"T2\".\"points\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 893,
    "difficulty": "simple",
    "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
    "evidence": "",
    "SQLite_query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
    "Postgres_query": "SELECT \"T3\".\"forename\", \"T3\".\"surname\", \"T2\".\"points\" FROM \"races\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"name\" = 'Chinese Grand Prix' AND \"T1\".\"year\" = 2017 ORDER BY \"T2\".\"points\" DESC NULLS LAST LIMIT 3",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 894,
    "difficulty": "moderate",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "evidence": "the best lap time refers to min(time)",
    "SQLite_query": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"milliseconds\", \"T1\".\"forename\", \"T1\".\"surname\", \"T3\".\"name\" FROM \"drivers\" AS \"T1\" INNER JOIN \"lapTimes\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T2\".\"raceId\" = \"T3\".\"raceId\" ORDER BY \"T2\".\"milliseconds\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 895,
    "difficulty": "moderate",
    "question": "What is the average lap time for Sebastian Vettel in the 2009 Chinese Grand Prix?",
    "evidence": "AVG(time);",
    "SQLite_query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Sebastian' AND T3.surname = 'Vettel' AND T1.year = 2009 AND T1.name = 'Chinese GrAND Prix'",
    "Postgres_query": "SELECT AVG(\"T2\".\"milliseconds\") FROM \"races\" AS \"T1\" INNER JOIN \"lapTimes\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"forename\" = 'Sebastian' AND \"T3\".\"surname\" = 'Vettel' AND \"T1\".\"year\" = 2009 AND \"T1\".\"name\" = 'Chinese GrAND Prix'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 896,
    "difficulty": "challenging",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "evidence": "DIVIDE(COUNT(raceId) where surname = 'Hamilton', year >= 2010 and position>1), (COUNT(raceId) where surname = 'Hamilton', year >= 2010) as percentage;",
    "SQLite_query": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
    "Postgres_query": "SELECT CAST(COUNT(CASE WHEN \"T2\".\"position\" <> 1 THEN \"T2\".\"position\" END) AS NUMERIC) * 100 / COUNT(\"T2\".\"driverStandingsId\") FROM \"races\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"surname\" = 'Hamilton' AND \"T1\".\"year\" >= 2010",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 897,
    "difficulty": "moderate",
    "question": "Name the driver with the most winning. Mention his nationality and what is his average point scores.",
    "evidence": "the most winning refers to MAX(COUNT(wins)); avg(points);",
    "SQLite_query": "SELECT T1.forename, T1.surname, T1.nationality, AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins = 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"forename\", \"T1\".\"surname\", \"T1\".\"nationality\", AVG(\"T2\".\"points\") FROM drivers AS \"T1\" INNER JOIN driverStandings AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T2\".\"wins\" = 1 GROUP BY \"T1\".\"forename\", \"T1\".\"surname\", \"T1\".\"nationality\" ORDER BY COUNT(\"T2\".\"wins\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 898,
    "difficulty": "simple",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "evidence": "youngest Japanese driver refers to max(dob); Japanese refers to nationality = 'Japanese'; age = 2022-year(dob)+1\n",
    "SQLite_query": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "Postgres_query": "SELECT extract(year from CURRENT_TIMESTAMP) - extract(year from \"dob\"), \"forename\", \"surname\" FROM \"drivers\" WHERE \"nationality\" = 'Japanese' ORDER BY \"dob\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 899,
    "difficulty": "moderate",
    "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
    "evidence": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;",
    "SQLite_query": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"name\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE to_char(\"T2\".\"date\"::timestamp, 'YYYY') BETWEEN '1990' AND '2000' GROUP BY \"T1\".\"name\" HAVING COUNT(\"T2\".\"raceId\") = 4",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 900,
    "difficulty": "simple",
    "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "evidence": "",
    "SQLite_query": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
    "Postgres_query": "SELECT \"T1\".\"name\", \"T1\".\"location\", \"T2\".\"name\" FROM circuits AS \"T1\" INNER JOIN races AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"country\" = 'USA' AND \"T2\".\"year\" = 2006",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 901,
    "difficulty": "simple",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "evidence": "in September 2005 refers to month(date) = 9 and year = 2005",
    "SQLite_query": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"name\", \"T1\".\"name\", \"T1\".\"location\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"year\" = 2005 AND to_char(\"T2\".\"date\"::timestamp, 'MM') = '09'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 902,
    "difficulty": "simple",
    "question": "Which race was Alex Yoong in when he was in track number less than 10?",
    "evidence": "track number less than 10 refers to position < 10",
    "SQLite_query": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10",
    "Postgres_query": "SELECT \"T1\".\"name\" FROM \"races\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"forename\" = 'Alex' AND \"T3\".\"surname\" = 'Yoong' AND \"T2\".\"position\" < 10",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 903,
    "difficulty": "moderate",
    "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
    "evidence": "win from races refers to max(points)",
    "SQLite_query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
    "Postgres_query": "SELECT SUM(\"T2\".\"wins\") FROM \"drivers\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T3\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN \"circuits\" AS \"T4\" ON \"T4\".\"circuitId\" = \"T3\".\"circuitId\" WHERE \"T1\".\"forename\" = 'Michael' AND \"T1\".\"surname\" = 'Schumacher' AND \"T4\".\"name\" = 'Sepang International Circuit'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 904,
    "difficulty": "moderate",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "evidence": "fastest lap refers to min(milliseconds)",
    "SQLite_query": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"name\", \"T1\".\"year\" FROM \"races\" AS \"T1\" INNER JOIN \"lapTimes\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"forename\" = 'Michael' AND \"T3\".\"surname\" = 'Schumacher' ORDER BY \"T2\".\"milliseconds\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 905,
    "difficulty": "simple",
    "question": "What is Eddie Irvine's average points scored in year 2000?",
    "evidence": "average points = AVG(points where year = 2000)",
    "SQLite_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
    "Postgres_query": "SELECT AVG(\"T2\".\"points\") FROM \"drivers\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T3\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T1\".\"forename\" = 'Eddie' AND \"T1\".\"surname\" = 'Irvine' AND \"T3\".\"year\" = 2000",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 906,
    "difficulty": "moderate",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "evidence": "first race refers to min(Year)",
    "SQLite_query": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"name\", \"T2\".\"points\" FROM \"races\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"forename\" = 'Lewis' AND \"T3\".\"surname\" = 'Hamilton' ORDER BY \"T1\".\"year\" ASC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 907,
    "difficulty": "simple",
    "question": "List all races in 2017 and the hosting country order by date of the event.",
    "evidence": "",
    "SQLite_query": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"name\", \"T1\".\"country\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"year\" = 2017 ORDER BY \"T2\".\"date\" ASC NULLS LAST",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 908,
    "difficulty": "simple",
    "question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
    "evidence": "",
    "SQLite_query": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1",
    "Postgres_query": "SELECT \"T3\".\"lap\", \"T2\".\"name\", \"T2\".\"year\", \"T1\".\"location\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"circuitId\" = \"T2\".\"circuitId\" INNER JOIN \"lapTimes\" AS \"T3\" ON \"T3\".\"raceId\" = \"T2\".\"raceId\" ORDER BY \"T3\".\"lap\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 909,
    "difficulty": "moderate",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "evidence": "percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
    "SQLite_query": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
    "Postgres_query": "SELECT CAST(COUNT(CASE WHEN \"T1\".\"country\" = 'Germany' THEN \"T2\".\"circuitId\" END) AS REAL) * 100 / COUNT(\"T2\".\"circuitId\") FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitId\" = \"T1\".\"circuitId\" WHERE \"T2\".\"name\" = 'European Grand Prix'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 910,
    "difficulty": "simple",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "evidence": "coordinates refers to (lat, lng)",
    "SQLite_query": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "Postgres_query": "SELECT \"lat\", \"lng\" FROM \"circuits\" WHERE \"name\" = 'Silverstone Circuit'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 911,
    "difficulty": "simple",
    "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
    "evidence": "higher latitude refers to max(lat)",
    "SQLite_query": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
    "Postgres_query": "SELECT \"name\" FROM \"circuits\" WHERE \"name\" IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY \"lat\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 912,
    "difficulty": "simple",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "evidence": "reference name refers to circuitRef",
    "SQLite_query": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "Postgres_query": "SELECT \"circuitRef\" FROM \"circuits\" WHERE \"name\" = 'Marina Bay Street Circuit'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 913,
    "difficulty": "simple",
    "question": "In which country can I find the circuit with the highest altitude?",
    "evidence": "highest altitude refers to max(alt)",
    "SQLite_query": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "Postgres_query": "SELECT \"country\" FROM \"circuits\" ORDER BY \"alt\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 914,
    "difficulty": "simple",
    "question": "How many drivers don't have a code?",
    "evidence": "don't have a code refers to code is null",
    "SQLite_query": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers",
    "Postgres_query": "SELECT count(\"driverId\") - count(CASE WHEN \"code\" IS NOT NULL THEN \"code\" END) FROM \"drivers\"",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 915,
    "difficulty": "simple",
    "question": "Which country is the oldest driver from?",
    "evidence": "oldest driver refers to min(dob)",
    "SQLite_query": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
    "Postgres_query": "SELECT \"nationality\" FROM \"drivers\" WHERE \"dob\" IS NOT NULL ORDER BY \"dob\" ASC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 916,
    "difficulty": "simple",
    "question": "Please list the surnames of all the Italian drivers.",
    "evidence": "Italian refers to nationality = 'Italian'",
    "SQLite_query": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "Postgres_query": "SELECT \"surname\" FROM \"drivers\" WHERE \"nationality\" = 'Italian'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 917,
    "difficulty": "simple",
    "question": "Which website should I go to if I want to know more about Anthony Davidson?",
    "evidence": "website refers to url",
    "SQLite_query": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
    "Postgres_query": "SELECT \"url\" FROM \"drivers\" WHERE \"forename\" = 'Anthony' AND \"surname\" = 'Davidson'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 918,
    "difficulty": "simple",
    "question": "What's Lewis Hamilton's reference name?",
    "evidence": "reference name refers to driverRef",
    "SQLite_query": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
    "Postgres_query": "SELECT \"driverRef\" FROM \"drivers\" WHERE \"forename\" = 'Lewis' AND \"surname\" = 'Hamilton'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 919,
    "difficulty": "simple",
    "question": "Which circuit did the 2009 Spanish Grand Prix use?",
    "evidence": "",
    "SQLite_query": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "Postgres_query": "SELECT \"T1\".\"name\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"year\" = 2009 AND \"T2\".\"name\" = 'Spanish Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 920,
    "difficulty": "simple",
    "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "evidence": "",
    "SQLite_query": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "Postgres_query": "SELECT DISTINCT to_char(\"T2\".\"year\"::timestamp, 'YYYY') FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Silverstone Circuit'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 921,
    "difficulty": "simple",
    "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "evidence": "more information refers to url",
    "SQLite_query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"url\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Silverstone Circuit'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 922,
    "difficulty": "simple",
    "question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
    "evidence": "",
    "SQLite_query": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'",
    "Postgres_query": "SELECT \"T2\".\"date\", \"T2\".\"time\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"year\" = 2010 AND \"T2\".\"name\" = 'Abu Dhabi Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 923,
    "difficulty": "simple",
    "question": "How many Formula_1 races took place on the circuits in Italy?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"circuitId\") FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"country\" = 'Italy'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 924,
    "difficulty": "simple",
    "question": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.",
    "evidence": "",
    "SQLite_query": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "Postgres_query": "SELECT \"T2\".\"date\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T1\".\"name\" = 'Circuit de Barcelona-Catalunya'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 925,
    "difficulty": "simple",
    "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
    "evidence": "link of the website refers to url",
    "SQLite_query": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "Postgres_query": "SELECT \"T1\".\"url\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T2\".\"circuitID\" = \"T1\".\"circuitId\" WHERE \"T2\".\"year\" = 2009 AND \"T2\".\"name\" = 'Spanish Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 926,
    "difficulty": "simple",
    "question": "What's the fastest lap time ever in a race for Lewis Hamilton?",
    "evidence": "fastest lap time ever refers to min(fastestLapTime)",
    "SQLite_query": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"fastestLapTime\" FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T1\".\"forename\" = 'Lewis' AND \"T1\".\"surname\" = 'Hamilton' AND \"T2\".\"fastestLapTime\" IS NOT NULL ORDER BY \"T2\".\"fastestLapTime\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 927,
    "difficulty": "simple",
    "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "evidence": "",
    "SQLite_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"forename\", \"T1\".\"surname\" FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"driverId\" = \"T1\".\"driverId\" WHERE \"T2\".\"fastestLapTime\" IS NOT NULL ORDER BY \"T2\".\"fastestLapSpeed\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 928,
    "difficulty": "moderate",
    "question": "Which driver ranked the first in the Australian Grand Prix in 2008? Please give his reference name.",
    "evidence": "reference name refers to driverRef",
    "SQLite_query": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Australian Grand Prix' AND T2.rank = 1 AND T1.year = 2008",
    "Postgres_query": "SELECT \"T3\".\"forename\", \"T3\".\"surname\", \"T3\".\"driverRef\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"name\" = 'Australian Grand Prix' AND \"T2\".\"rank\" = 1 AND \"T1\".\"year\" = 2008",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 929,
    "difficulty": "simple",
    "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
    "evidence": "",
    "SQLite_query": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "Postgres_query": "SELECT \"T1\".\"name\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"forename\" = 'Lewis' AND \"T3\".\"surname\" = 'Hamilton'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 930,
    "difficulty": "simple",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "evidence": "rank the highest refers to min(rank)",
    "SQLite_query": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
    "Postgres_query": "SELECT \"name\" FROM \"races\" WHERE \"raceId\" IN ( SELECT \"raceId\" FROM \"results\" WHERE \"rank\" = 1 AND \"driverId\" = ( SELECT \"driverId\" FROM \"drivers\" WHERE \"forename\" = 'Lewis' AND \"surname\" = 'Hamilton' ) )",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 931,
    "difficulty": "moderate",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed)",
    "SQLite_query": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"fastestLapSpeed\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" WHERE \"T1\".\"name\" = 'Spanish Grand Prix' AND \"T1\".\"year\" = 2009 AND \"T2\".\"fastestLapSpeed\" IS NOT NULL ORDER BY \"T2\".\"fastestLapSpeed\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 932,
    "difficulty": "simple",
    "question": "In which years did Lewis Hamilton participate in a Formula_1 race?",
    "evidence": "",
    "SQLite_query": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "Postgres_query": "SELECT DISTINCT to_char(\"T1\".\"year\"::timestamp, 'YYYY') FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"forename\" = 'Lewis' AND \"T3\".\"surname\" = 'Hamilton'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 933,
    "difficulty": "moderate",
    "question": "What was Lewis Hamilton's final rank in the 2008 Australian Grand Prix?",
    "evidence": "final rank refers to positionOrder",
    "SQLite_query": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Australian Grand Prix' AND T1.year = 2008",
    "Postgres_query": "SELECT \"T2\".\"positionOrder\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T3\".\"forename\" = 'Lewis' AND \"T3\".\"surname\" = 'Hamilton' AND \"T1\".\"name\" = 'Australian Grand Prix' AND \"T1\".\"year\" = 2008",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 934,
    "difficulty": "moderate",
    "question": "Which driver was in the no. 4 grid formation when starting the race in 2008's Australian Grand Prix? Please give his forename and surname.",
    "evidence": "the no. 4 grid formation refers to grid = 4",
    "SQLite_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 2008",
    "Postgres_query": "SELECT \"T3\".\"forename\", \"T3\".\"surname\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T3\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"grid\" = 4 AND \"T1\".\"name\" = 'Australian Grand Prix' AND \"T1\".\"year\" = 2008",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 935,
    "difficulty": "simple",
    "question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
    "evidence": "managed to finish the race refers to time is not null",
    "SQLite_query": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
    "Postgres_query": "SELECT COUNT(\"T2\".\"driverId\") FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" WHERE \"T1\".\"name\" = 'Australian Grand Prix' AND \"T1\".\"year\" = 2008 AND \"T2\".\"time\" IS NOT NULL",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 936,
    "difficulty": "simple",
    "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
    "evidence": "",
    "SQLite_query": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "Postgres_query": "SELECT \"T1\".\"fastestLap\" FROM \"results\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" ON \"T1\".\"driverId\" = \"T3\".\"driverId\" WHERE \"T2\".\"name\" = 'Australian Grand Prix' AND \"T2\".\"year\" = 2008 AND \"T3\".\"forename\" = 'Lewis' AND \"T3\".\"surname\" = 'Hamilton'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 937,
    "difficulty": "simple",
    "question": "What's the finish time for the driver who ranked second in 2008's Australian Grand Prix?",
    "evidence": "finish time refers to time",
    "SQLite_query": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Australian Grand Prix' AND T2.year = 2008",
    "Postgres_query": "SELECT \"T1\".\"time\" FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T1\".\"rank\" = 2 AND \"T2\".\"name\" = 'Australian Grand Prix' AND \"T2\".\"year\" = 2008",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 938,
    "difficulty": "moderate",
    "question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
    "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url",
    "SQLite_query": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008",
    "Postgres_query": "SELECT \"T1\".\"forename\", \"T1\".\"surname\", \"T1\".\"url\" FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T3\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T3\".\"name\" = 'Australian Grand Prix' AND \"T2\".\"time\" LIKE '_:%:__.___' AND \"T3\".\"year\" = 2008",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 939,
    "difficulty": "moderate",
    "question": "How many drivers from the USA participated in the 2008 Australian Grand Prix?",
    "evidence": "from the USA refers to nationality = 'American'",
    "SQLite_query": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian GrAND Prix' AND T1.nationality = 'American' AND T3.year = 2008",
    "Postgres_query": "SELECT COUNT(*) FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T3\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T3\".\"name\" = 'Australian GrAND Prix' AND \"T1\".\"nationality\" = 'American' AND \"T3\".\"year\" = 2008",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 940,
    "difficulty": "moderate",
    "question": "Among the drivers that finished the race in the 2008 Australian Grand Prix, how many of them have participated in Formula_1 races?",
    "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
    "SQLite_query": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
    "Postgres_query": "SELECT count(*) FROM ( SELECT \"T1\".\"driverId\" FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"name\" = 'Australian Grand Prix' AND \"T2\".\"year\" = 2008 AND \"T1\".\"time\" IS NOT NULL GROUP BY \"T1\".\"driverId\" HAVING count(\"T2\".\"raceId\") > 0 ) AS \"subquery\"",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 941,
    "difficulty": "simple",
    "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
    "evidence": "",
    "SQLite_query": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
    "Postgres_query": "SELECT SUM(\"T2\".\"points\") FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"forename\" = 'Lewis' AND \"T1\".\"surname\" = 'Hamilton'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 942,
    "difficulty": "moderate",
    "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
    "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
    "SQLite_query": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
    "Postgres_query": "SELECT AVG(CAST(substring(\"T2\".\"fastestLapTime\" from 1 for position(':' in \"T2\".\"fastestLapTime\") - 1) AS INT) * 60 + CAST(substring(\"T2\".\"fastestLapTime\" from position(':' in \"T2\".\"fastestLapTime\") + 1) AS FLOAT)) FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"surname\" = 'Hamilton' AND \"T1\".\"forename\" = 'Lewis'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 943,
    "difficulty": "moderate",
    "question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
    "evidence": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))",
    "SQLite_query": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian GrAND Prix' AND T2.year = 2008",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T1\".\"time\" IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"resultId\") FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"name\" = 'Australian GrAND Prix' AND \"T2\".\"year\" = 2008",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 944,
    "difficulty": "challenging",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100%; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
    "SQLite_query": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
    "Postgres_query": "WITH time_in_seconds AS ( SELECT \"T1\".\"positionOrder\", CASE WHEN \"T1\".\"positionOrder\" = 1 THEN (CAST(SUBSTR(\"T1\".\"time\", 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(\"T1\".\"time\", 3, 2) AS REAL) * 60) + CAST(SUBSTR(\"T1\".\"time\", 6) AS REAL) ELSE CAST(SUBSTR(\"T1\".\"time\", 2) AS REAL) END AS time_seconds FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"name\" = 'Australian Grand Prix' AND \"T1\".\"time\" IS NOT NULL AND \"T2\".\"year\" = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE \"positionOrder\" = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE \"positionOrder\" = (SELECT MAX(\"positionOrder\") FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 945,
    "difficulty": "simple",
    "question": "How many circuits are there in Melbourne, Australia?",
    "evidence": "Australia is the country; Melbourne is the location of circuit;",
    "SQLite_query": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'",
    "Postgres_query": "SELECT COUNT(\"circuitId\") FROM \"circuits\" WHERE \"location\" = 'Melbourne' AND \"country\" = 'Australia'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 946,
    "difficulty": "simple",
    "question": "Please list the location coordinates of the US circuits.",
    "evidence": "location coordinates refers to (lat, lng); the US refers to country = 'USA';",
    "SQLite_query": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
    "Postgres_query": "SELECT \"lat\", \"lng\" FROM \"circuits\" WHERE \"country\" = 'USA'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 947,
    "difficulty": "simple",
    "question": "How many British drivers were born after 1980?",
    "evidence": "born after 1980 refers to year (dob) >1980;",
    "SQLite_query": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
    "Postgres_query": "SELECT COUNT(\"driverId\") FROM \"drivers\" WHERE \"nationality\" = 'British' AND to_char(\"dob\"::timestamp, 'YYYY') > '1980'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 948,
    "difficulty": "simple",
    "question": "What are the average points of British constructors?",
    "evidence": "average points = AVG(points); British is a nationality",
    "SQLite_query": "SELECT AVG(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "Postgres_query": "SELECT AVG(\"T1\".\"points\") FROM \"constructorStandings\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" WHERE \"T2\".\"nationality\" = 'British'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 949,
    "difficulty": "simple",
    "question": "Which constructor has the highest point?",
    "evidence": "",
    "SQLite_query": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"name\" FROM \"constructorStandings\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" ORDER BY \"T1\".\"points\" DESC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 950,
    "difficulty": "simple",
    "question": "Please list the constructor names with 0 points at race 291.",
    "evidence": "race at 18 refers to raceID = 18;",
    "SQLite_query": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
    "Postgres_query": "SELECT \"T2\".\"name\" FROM \"constructorStandings\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" WHERE \"T1\".\"points\" = 0 AND \"T1\".\"raceId\" = 291",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 951,
    "difficulty": "simple",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "evidence": "2 races refers to COUNT(raceID) = 2;",
    "SQLite_query": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
    "Postgres_query": "SELECT COUNT(\"T1\".\"raceId\") FROM \"constructorStandings\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" WHERE \"T1\".\"points\" = 0 AND \"T2\".\"nationality\" = 'Japanese' GROUP BY \"T1\".\"constructorId\" HAVING COUNT(\"raceId\") = 2",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 952,
    "difficulty": "simple",
    "question": "Which constructors have been ranked 1?",
    "evidence": "",
    "SQLite_query": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"name\" FROM \"results\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" WHERE \"T1\".\"rank\" = 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 953,
    "difficulty": "simple",
    "question": "How many French constructors have a lap number of over 50?",
    "evidence": "lap numbers of over 50 refers to laps > 50;",
    "SQLite_query": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
    "Postgres_query": "SELECT COUNT(DISTINCT \"T2\".\"constructorId\") FROM \"results\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" WHERE \"T1\".\"laps\" > 50 AND \"T2\".\"nationality\" = 'French'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 954,
    "difficulty": "challenging",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100;",
    "SQLite_query": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T1\".\"time\" IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"raceId\") FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN drivers AS \"T3\" ON \"T1\".\"driverId\" = \"T3\".\"driverId\" WHERE \"T3\".\"nationality\" = 'Japanese' AND \"T2\".\"year\" BETWEEN 2007 AND 2009",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 955,
    "difficulty": "challenging",
    "question": "What is the average time in seconds of champion for each year?",
    "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null.",
    "SQLite_query": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "Postgres_query": "WITH time_in_seconds AS ( SELECT \"T2\".\"year\", \"T2\".\"raceId\", \"T1\".\"positionOrder\", CASE WHEN \"T1\".\"positionOrder\" = 1 THEN (CAST(substring(\"T1\".\"time\" FROM 1 FOR 1) AS REAL) * 3600) + (CAST(substring(\"T1\".\"time\" FROM 3 FOR 2) AS REAL) * 60) + CAST(substring(\"T1\".\"time\" FROM 6) AS REAL) ELSE CAST(substring(\"T1\".\"time\" FROM 2) AS REAL) END AS time_seconds FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T1\".\"time\" IS NOT NULL ), champion_time AS ( SELECT \"year\", \"raceId\", time_seconds FROM time_in_seconds WHERE \"positionOrder\" = 1 ) SELECT \"year\", AVG(time_seconds) FROM champion_time GROUP BY \"year\" HAVING AVG(time_seconds) IS NOT NULL",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 956,
    "difficulty": "simple",
    "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
    "evidence": "born after 1975 refers to year(dob) >1975;",
    "SQLite_query": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
    "Postgres_query": "SELECT \"T2\".\"forename\", \"T2\".\"surname\" FROM results AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE to_char(\"T2\".\"dob\"::timestamp, 'YYYY') > '1975' AND \"T1\".\"rank\" = 2",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 957,
    "difficulty": "simple",
    "question": "How many Italian drivers haven't finished the race?",
    "evidence": "haven't finished the race refers to time is null;",
    "SQLite_query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
    "Postgres_query": "SELECT count(\"T1\".\"driverId\") FROM results AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"nationality\" = 'Italian' AND \"T1\".\"time\" IS NULL",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 958,
    "difficulty": "moderate",
    "question": "Which driver has the fastest lap time? Please give their forenames and surnames.",
    "evidence": "",
    "SQLite_query": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"forename\", \"T2\".\"surname\", \"T1\".\"fastestLapTime\" FROM \"results\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"fastestLapTime\" IS NOT NULL ORDER BY \"T1\".\"fastestLapTime\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 959,
    "difficulty": "simple",
    "question": "What is the fastest lap number of the champion in 2009?",
    "evidence": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
    "SQLite_query": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "Postgres_query": "SELECT \"T1\".\"fastestLap\" FROM \"results\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"year\" = 2009 AND \"T1\".\"time\" LIKE '_:%:__.___'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 960,
    "difficulty": "moderate",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
    "SQLite_query": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "Postgres_query": "SELECT AVG(\"T1\".\"fastestLapSpeed\") FROM \"results\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"year\" = 2009 AND \"T2\".\"name\" = 'Spanish Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 961,
    "difficulty": "simple",
    "question": "Which race has the shortest actual finishing time? Please give the name and year.",
    "evidence": "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;",
    "SQLite_query": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"name\", \"T1\".\"year\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"milliseconds\" IS NOT NULL ORDER BY \"T2\".\"milliseconds\" NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 962,
    "difficulty": "challenging",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
    "SQLite_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN to_char(\"T3\".\"dob\"::timestamp, 'YYYY') < '1985' AND \"T1\".\"laps\" > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"results\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" on \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN \"drivers\" AS \"T3\" on \"T1\".\"driverId\" = \"T3\".\"driverId\" WHERE \"T2\".\"year\" BETWEEN 2000 AND 2005",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 963,
    "difficulty": "moderate",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "evidence": "lap time less than 01:00.00 refers to seconds < 120;",
    "SQLite_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
    "Postgres_query": "SELECT COUNT(\"T1\".\"driverId\") FROM \"drivers\" AS \"T1\" INNER JOIN \"lapTimes\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"nationality\" = 'French' AND ((CAST(substring(\"T2\".\"time\", 1, 2) AS INT) * 60 + CAST(substring(\"T2\".\"time\", 4, 2) AS INT) + CAST(substring(\"T2\".\"time\", 7, 2) AS REAL) / 1000)) < 120",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 964,
    "difficulty": "simple",
    "question": "List out the code for drivers who have nationality in America.",
    "evidence": "nationality = 'American'",
    "SQLite_query": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "Postgres_query": "SELECT \"code\" FROM \"drivers\" WHERE \"Nationality\" = 'American'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 965,
    "difficulty": "simple",
    "question": "List out the Id number of races which were hold in 2009.",
    "evidence": "",
    "SQLite_query": "SELECT raceId FROM races WHERE year = 2009",
    "Postgres_query": "SELECT \"raceId\" FROM \"races\" WHERE \"year\" = 2009",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 966,
    "difficulty": "simple",
    "question": "How many driver participated in race ID number 18?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
    "Postgres_query": "SELECT count(\"driverId\") FROM \"driverStandings\" WHERE \"raceId\" = 18",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 967,
    "difficulty": "simple",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
    "SQLite_query": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
    "Postgres_query": "SELECT count(*) FROM ( SELECT \"T1\".\"nationality\" FROM \"drivers\" AS \"T1\" ORDER BY julianday(\"T1\".\"dob\") DESC LIMIT 3) AS \"T3\" WHERE \"T3\".\"nationality\" = 'Dutch'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 968,
    "difficulty": "simple",
    "question": "What is reference name of Robert Kubica?",
    "evidence": "reference name refers to driverRef;",
    "SQLite_query": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
    "Postgres_query": "SELECT \"driverRef\" FROM \"drivers\" WHERE \"forename\" = 'Robert' AND \"surname\" = 'Kubica'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 969,
    "difficulty": "simple",
    "question": "How many Australian drivers who were born in 1980?",
    "evidence": "born in 1980 refers to year(dob) = 1980;",
    "SQLite_query": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'Australian' AND STRFTIME('%Y', dob) = '1980'",
    "Postgres_query": "SELECT COUNT(\"driverId\") FROM \"drivers\" WHERE \"nationality\" = 'Australian' AND to_char(\"dob\"::timestamp, 'YYYY') = '1980'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 970,
    "difficulty": "moderate",
    "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
    "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
    "SQLite_query": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
    "Postgres_query": "SELECT \"T2\".\"driverId\" FROM \"pitStops\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"nationality\" = 'German' AND to_char(\"T2\".\"dob\"::timestamp, 'YYYY') BETWEEN '1980' AND '1990' ORDER BY \"T1\".\"time\" NULLS LAST LIMIT 3",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 971,
    "difficulty": "simple",
    "question": "Please state the reference name of the oldest German driver.",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "SQLite_query": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "Postgres_query": "SELECT \"driverRef\" FROM \"drivers\" WHERE \"nationality\" = 'German' ORDER BY CAST(julianday(\"dob\") AS INT) ASC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 972,
    "difficulty": "moderate",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
    "SQLite_query": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
    "Postgres_query": "SELECT \"T2\".\"driverId\", \"T2\".\"code\" FROM results AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE to_char(\"T2\".\"dob\"::timestamp, 'YYYY') = '1971' AND \"T1\".\"fastestLapTime\" IS NOT NULL",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 973,
    "difficulty": "moderate",
    "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
    "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
    "SQLite_query": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
    "Postgres_query": "SELECT \"T2\".\"driverId\" FROM \"pitStops\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"nationality\" = 'Spanish' AND to_char(\"T2\".\"dob\"::timestamp, 'YYYY') < '1982' ORDER BY \"T1\".\"time\" DESC NULLS LAST LIMIT 10",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 974,
    "difficulty": "simple",
    "question": "State the racing year which has the fastest lap time?",
    "evidence": "'has the fastest lap time?' refers to fastestLapTime has values",
    "SQLite_query": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL",
    "Postgres_query": "SELECT to_char(\"T2\".\"year\"::timestamp, 'YYYY') FROM results AS T1 INNER JOIN races AS T2 on T1.\"raceId\" = T2.\"raceId\" WHERE T1.\"fastestLapTime\" IS NOT NULL",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 975,
    "difficulty": "simple",
    "question": "Which year has the lowest speed of lap time?",
    "evidence": "lowest speed of lap time refers to Max(time);",
    "SQLite_query": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1",
    "Postgres_query": "SELECT to_char(\"T2\".\"year\"::timestamp, 'YYYY') FROM \"lapTimes\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" ORDER BY \"T1\".\"time\" DESC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 976,
    "difficulty": "simple",
    "question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
    "evidence": "fastest time refers to Min(time);",
    "SQLite_query": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
    "Postgres_query": "SELECT \"driverId\" FROM \"lapTimes\" WHERE \"lap\" = 1 ORDER BY \"time\" ASC LIMIT 5",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 977,
    "difficulty": "simple",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
    "SQLite_query": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
    "Postgres_query": "SELECT SUM(CASE WHEN \"time\" IS NOT NULL THEN 1 ELSE 0 END) FROM \"results\" WHERE \"statusId\" = 2 AND \"raceID\" < 100 AND \"raceId\" > 50",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 978,
    "difficulty": "simple",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "evidence": "location coordinates refers to (lat,lng);",
    "SQLite_query": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "Postgres_query": "SELECT DISTINCT \"location\", \"lat\", \"lng\" FROM \"circuits\" WHERE \"country\" = 'Austria'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 979,
    "difficulty": "simple",
    "question": "What race number has the most finishers?",
    "evidence": "finisher refers to time is not null;",
    "SQLite_query": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
    "Postgres_query": "SELECT \"raceId\" FROM \"results\" GROUP BY \"raceId\" ORDER BY count(\"time\" IS NOT NULL) DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 980,
    "difficulty": "moderate",
    "question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
    "evidence": "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;",
    "SQLite_query": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL",
    "Postgres_query": "SELECT \"T2\".\"driverRef\", \"T2\".\"nationality\", \"T2\".\"dob\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T1\".\"raceId\" = 23 AND \"T1\".\"q2\" IS NOT NULL",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 981,
    "difficulty": "moderate",
    "question": "On what year did the youngest driver had his first qualifying race? State the name, date and time of the race.",
    "evidence": "youngest driver refers to Max (year(dob));",
    "SQLite_query": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
    "Postgres_query": "SELECT \"T3\".\"year\", \"T3\".\"name\", \"T3\".\"date\", \"T3\".\"time\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN races AS \"T3\" ON \"T1\".\"raceId\" = \"T3\".\"raceId\" WHERE \"T1\".\"driverId\" = ( SELECT \"driverId\" FROM drivers ORDER BY \"dob\" DESC LIMIT 1 ) ORDER BY \"T3\".\"date\" ASC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 982,
    "difficulty": "simple",
    "question": "How many American drivers have been disqualified from the race.",
    "evidence": "disqualified refers to statusID = 2;",
    "SQLite_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.nationality = 'American'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"driverId\") FROM \"drivers\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN \"status\" AS \"T3\" ON \"T2\".\"statusId\" = \"T3\".\"statusId\" WHERE \"T3\".\"status\" = 2 AND \"T1\".\"nationality\" = 'American'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 983,
    "difficulty": "simple",
    "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
    "evidence": "introduction website refers to url; Italian is a nationality",
    "SQLite_query": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"url\" FROM \"constructors\" AS \"T1\" INNER JOIN \"constructorStandings\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" WHERE \"T1\".\"nationality\" = 'Italian' ORDER BY \"T2\".\"points\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 984,
    "difficulty": "simple",
    "question": "What is the website of the constructor who tallied the most total wins.",
    "evidence": "introduction website refers to url;",
    "SQLite_query": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"url\" FROM \"constructors\" AS \"T1\" INNER JOIN \"constructorStandings\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" ORDER BY \"T2\".\"wins\" DESC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 985,
    "difficulty": "simple",
    "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
    "evidence": "slowest time refers to Max(time);",
    "SQLite_query": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"driverId\" FROM \"lapTimes\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"name\" = 'French Grand Prix' AND \"T1\".\"lap\" = 3 ORDER BY \"T1\".\"time\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 986,
    "difficulty": "simple",
    "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
    "evidence": "fastest refers to Min(time);",
    "SQLite_query": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"milliseconds\" FROM \"lapTimes\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T1\".\"lap\" = 1 ORDER BY \"T1\".\"time\" NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 987,
    "difficulty": "simple",
    "question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
    "evidence": "top 10 refers to rank <11; AVG(fastestLapTime);",
    "SQLite_query": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States GrAND Prix'",
    "Postgres_query": "SELECT AVG(\"T1\".\"fastestLapTime\") FROM \"results\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T1\".\"rank\" < 11 AND \"T2\".\"year\" = 2006 AND \"T2\".\"name\" = 'United States GrAND Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 988,
    "difficulty": "challenging",
    "question": "List down top 5 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "evidence": "born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
    "SQLite_query": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 5",
    "Postgres_query": "SELECT \"T2\".\"forename\", \"T2\".\"surname\" FROM \"pitStops\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"nationality\" = 'German' AND to_char(\"T2\".\"dob\"::timestamp, 'YYYY') BETWEEN '1980' AND '1985' GROUP BY \"T2\".\"forename\", \"T2\".\"surname\" ORDER BY AVG(\"T1\".\"duration\") NULLS LAST LIMIT 5",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 989,
    "difficulty": "moderate",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
    "SQLite_query": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "Postgres_query": "SELECT \"T1\".\"time\" FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"name\" = 'Canadian Grand Prix' AND \"T2\".\"year\" = 2008 AND \"T1\".\"time\" LIKE '_:%:__.___'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 990,
    "difficulty": "challenging",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
    "SQLite_query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "Postgres_query": "SELECT \"T3\".\"constructorRef\", \"T3\".\"url\" FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN constructors AS \"T3\" ON \"T1\".\"constructorId\" = \"T3\".\"constructorId\" WHERE \"T2\".\"name\" = 'Singapore Grand Prix' AND \"T2\".\"year\" = 2009 AND \"T1\".\"time\" LIKE '_:%:__.___'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 991,
    "difficulty": "simple",
    "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
    "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
    "SQLite_query": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
    "Postgres_query": "SELECT \"forename\", \"surname\", \"dob\" FROM \"drivers\" WHERE \"nationality\" = 'Austrian' AND to_char(\"dob\"::timestamp, 'YYYY') BETWEEN '1981' AND '1991'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 992,
    "difficulty": "moderate",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
    "SQLite_query": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "Postgres_query": "SELECT \"forename\", \"surname\", \"url\", \"dob\" FROM \"drivers\" WHERE \"nationality\" = 'German' AND to_char(\"dob\"::timestamp, 'YYYY') BETWEEN '1971' AND '1985' ORDER BY \"dob\" DESC NULLS LAST",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 993,
    "difficulty": "simple",
    "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "SQLite_query": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "Postgres_query": "SELECT \"country\", \"lat\", \"lng\" FROM \"circuits\" WHERE \"name\" = 'Hungaroring'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 994,
    "difficulty": "challenging",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
    "SQLite_query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
    "Postgres_query": "SELECT SUM(\"T1\".\"points\"), \"T2\".\"name\", \"T2\".\"nationality\" FROM \"constructorResults\" AS \"T1\" INNER JOIN \"constructors\" AS \"T2\" ON \"T1\".\"constructorId\" = \"T2\".\"constructorId\" INNER JOIN \"races\" AS \"T3\" ON \"T3\".\"raceid\" = \"T1\".\"raceid\" WHERE \"T3\".\"name\" = 'Monaco Grand Prix' AND \"T3\".\"year\" BETWEEN 1980 AND 2010 GROUP BY \"T2\".\"name\" ORDER BY SUM(\"T1\".\"points\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 995,
    "difficulty": "moderate",
    "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
    "evidence": "Average score = AVG(points)",
    "SQLite_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
    "Postgres_query": "SELECT AVG(\"T2\".\"points\") FROM \"drivers\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T3\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T1\".\"forename\" = 'Lewis' AND \"T1\".\"surname\" = 'Hamilton' AND \"T3\".\"name\" = 'Turkish Grand Prix'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 996,
    "difficulty": "simple",
    "question": "What is the annual average number of races held during the first 10 years of the 21st century?",
    "evidence": "races in date between '2000-01-01' and '2010-12-31'",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"year\" BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM \"races\" WHERE \"date\" BETWEEN '2000-01-01' AND '2010-12-31'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 997,
    "difficulty": "simple",
    "question": "Which citizenship do the vast majority of the drivers hold?",
    "evidence": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n",
    "SQLite_query": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
    "Postgres_query": "SELECT \"nationality\" FROM \"drivers\" GROUP BY \"nationality\" ORDER BY count(\"driverId\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 998,
    "difficulty": "simple",
    "question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
    "evidence": "victories refer to wins; 91st refers to points\n\n",
    "SQLite_query": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
    "Postgres_query": "SELECT SUM(CASE WHEN \"points\" = 91 THEN \"wins\" ELSE 0 END) FROM \"driverStandings\"",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 999,
    "difficulty": "simple",
    "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n",
    "SQLite_query": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"name\" FROM \"races\" AS \"T1\" INNER JOIN \"results\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"fastestLapTime\" IS NOT NULL ORDER BY \"T2\".\"fastestLapTime\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1000,
    "difficulty": "simple",
    "question": "Which racetrack hosted the most recent race? Indicate the full location.",
    "evidence": "full location refers to location+country; most recent race = MAX(date)\n\n",
    "SQLite_query": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"location\" FROM \"circuits\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"circuitId\" = \"T2\".\"circuitId\" ORDER BY \"T2\".\"date\" DESC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1001,
    "difficulty": "challenging",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
    "SQLite_query": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"forename\", \"T2\".\"surname\" FROM qualifying AS \"T1\" INNER JOIN drivers AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN races AS \"T3\" ON \"T1\".\"raceid\" = \"T3\".\"raceid\" WHERE \"q3\" IS NOT NULL AND \"T3\".\"year\" = 2008 AND \"T3\".\"circuitId\" IN ( SELECT \"circuitId\" FROM circuits WHERE \"name\" = 'Marina Bay Street Circuit' ) ORDER BY CAST(substring(\"q3\" from 1 for position(':' in \"q3\") - 1) AS INT) * 60 + CAST(substring(\"q3\" from position(':' in \"q3\") + 1 for position('.' in \"q3\") - position(':' in \"q3\") - 1) AS REAL) + CAST(substring(\"q3\" from position('.' in \"q3\") + 1) AS REAL) / 1000 ASC LIMIT 1 NULLS LAST",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1002,
    "difficulty": "moderate",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)\n",
    "SQLite_query": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"forename\", \"T1\".\"surname\", \"T1\".\"nationality\", \"T3\".\"name\" FROM \"drivers\" AS \"T1\" INNER JOIN \"driverStandings\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T2\".\"raceId\" = \"T3\".\"raceId\" ORDER BY JULIAN(\"T1\".\"dob\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1003,
    "difficulty": "moderate",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "evidence": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n",
    "SQLite_query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
    "Postgres_query": "SELECT COUNT(\"T1\".\"driverId\") FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN status AS \"T3\" ON \"T1\".\"statusId\" = \"T3\".\"statusId\" WHERE \"T3\".\"statusId\" = 3 AND \"T2\".\"name\" = 'Canadian Grand Prix' GROUP BY \"T1\".\"driverId\" ORDER BY COUNT(\"T1\".\"driverId\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1004,
    "difficulty": "simple",
    "question": "How many wins was achieved by the oldest racer? Indicate his/her full name.",
    "evidence": "oldest racer refers to MIN(dob); full name refers to forename, surname.",
    "SQLite_query": "SELECT SUM(T1.wins) FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId GROUP BY T2.forename, T2.surname ORDER BY T2.dob ASC LIMIT 1",
    "Postgres_query": "SELECT SUM(\"T1\".\"wins\") FROM \"driverStandings\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" GROUP BY \"T2\".\"forename\", \"T2\".\"surname\" ORDER BY \"T2\".\"dob\" ASC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1005,
    "difficulty": "simple",
    "question": "What was the longest time a driver had ever spent at a pit stop?",
    "evidence": "longest time spent at pitstop refers to MAX(duration)",
    "SQLite_query": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1",
    "Postgres_query": "SELECT \"duration\" FROM \"pitStops\" ORDER BY \"duration\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1006,
    "difficulty": "challenging",
    "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
    "evidence": "",
    "SQLite_query": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
    "Postgres_query": "SELECT \"time\" FROM \"lapTimes\" ORDER BY (CASE WHEN strpos(\"time\", ':') != strpos(substring(\"time\", strpos(\"time\", ':') + 1), ':') + strpos(\"time\", ':') THEN CAST(substring(\"time\", 1, strpos(\"time\", ':') - 1) AS FLOAT) * 3600 ELSE 0 END) + (CAST(substring(\"time\", strpos(\"time\", ':') - 2 * (strpos(\"time\", ':') = strpos(substring(\"time\", strpos(\"time\", ':') + 1), ':') + strpos(\"time\", ':')), strpos(\"time\", ':') - 1) AS FLOAT) * 60) + (CAST(substring(\"time\", strpos(\"time\", ':') + 1, strpos(\"time\", '.') - strpos(\"time\", ':') - 1) AS FLOAT)) + (CAST(substring(\"time\", strpos(\"time\", '.') + 1) AS FLOAT) / 1000) ASC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1007,
    "difficulty": "simple",
    "question": "What was the longest time that Lewis Hamilton had spent at a pit stop?",
    "evidence": "longest time refes to MAX(duration);",
    "SQLite_query": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"duration\" FROM \"pitStops\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"forename\" = 'Lewis' AND \"T2\".\"surname\" = 'Hamilton' ORDER BY \"T1\".\"duration\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1008,
    "difficulty": "simple",
    "question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
    "evidence": "",
    "SQLite_query": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
    "Postgres_query": "SELECT \"T1\".\"lap\" FROM \"pitStops\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" INNER JOIN \"races\" AS \"T3\" ON \"T1\".\"raceId\" = \"T3\".\"raceId\" WHERE \"T2\".\"forename\" = 'Lewis' AND \"T2\".\"surname\" = 'Hamilton' AND \"T3\".\"year\" = 2011 AND \"T3\".\"name\" = 'Australian Grand Prix'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1009,
    "difficulty": "simple",
    "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
    "evidence": "time spent at pit stop refers to duration",
    "SQLite_query": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
    "Postgres_query": "SELECT \"T1\".\"duration\" FROM \"pitStops\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" WHERE \"T2\".\"year\" = 2011 AND \"T2\".\"name\" = 'Australian Grand Prix'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1010,
    "difficulty": "simple",
    "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
    "evidence": "lap recod means the fastest time recorded which refers to time",
    "SQLite_query": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "Postgres_query": "SELECT \"T1\".\"time\" FROM \"lapTimes\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"forename\" = 'Lewis' AND \"T2\".\"surname\" = 'Hamilton'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1011,
    "difficulty": "challenging",
    "question": "Which driver created the shortest lap time ever record in a Formula_1 race? Please give his full name.",
    "evidence": "shortest lap time refers to MIN(time)",
    "SQLite_query": "WITH lap_times_in_seconds AS ( SELECT driverId, (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname FROM ( SELECT driverId, MIN(time_in_seconds) as min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 1",
    "Postgres_query": "WITH lap_times_in_seconds AS ( SELECT \"driverId\", (CASE WHEN strpos(\"time\", ':') <> strpos(substr(\"time\", strpos(\"time\", ':') + 1), ':') + strpos(\"time\", ':') THEN CAST(substr(\"time\", 1, strpos(\"time\", ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(substr(\"time\", strpos(\"time\", ':') - 2 * (strpos(\"time\", ':') = strpos(substr(\"time\", strpos(\"time\", ':') + 1), ':') + strpos(\"time\", ':')), strpos(\"time\", ':') - 1) AS REAL) * 60) + (CAST(substr(\"time\", strpos(\"time\", ':') + 1, strpos(\"time\", '.') - strpos(\"time\", ':') - 1) AS REAL)) + (CAST(substr(\"time\", strpos(\"time\", '.') + 1) AS REAL) / 1000) as time_in_seconds FROM lapTimes) SELECT \"T2\".\"forename\", \"T2\".\"surname\" FROM ( SELECT \"driverId\", MIN(time_in_seconds) as min_time_in_seconds FROM lap_times_in_seconds GROUP BY \"driverId\") AS \"T1\" INNER JOIN drivers AS \"T2\" on \"T1\".\"driverId\" = \"T2\".\"driverId\" ORDER BY \"T1\".min_time_in_seconds ASC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1012,
    "difficulty": "simple",
    "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
    "evidence": "fastest lap refers to MIN(time)",
    "SQLite_query": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"position\" FROM \"lapTimes\" AS \"T1\" INNER JOIN \"drivers\" AS \"T2\" ON \"T1\".\"driverId\" = \"T2\".\"driverId\" WHERE \"T2\".\"forename\" = 'Lewis' AND \"T2\".\"surname\" = 'Hamilton' ORDER BY \"T1\".\"time\" ASC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1013,
    "difficulty": "simple",
    "question": "What is the lap record for the Austrian Grand Prix Circuit?",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "SQLite_query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
    "Postgres_query": "WITH \"fastest_lap_times\" AS ( SELECT \"T1\".\"raceId\", \"T1\".\"fastestLapTime\" FROM results AS \"T1\" WHERE \"T1\".\"fastestLapTime\" IS NOT NULL) SELECT MIN(\"fastest_lap_times\".\"fastestLapTime\") AS \"lap_record\" FROM \"fastest_lap_times\" INNER JOIN races AS \"T2\" ON \"fastest_lap_times\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN circuits AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" WHERE \"T2\".\"name\" = 'Austrian Grand Prix'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1014,
    "difficulty": "challenging",
    "question": "Please list the lap records for the circuits in Italy.",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "SQLite_query": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "Postgres_query": "WITH fastest_lap_times AS (SELECT \"T1\".\"raceId\", \"T1\".\"FastestLapTime\", ((CAST(substring(\"T1\".\"FastestLapTime\", 1, strpos(\"T1\".\"FastestLapTime\", ':') - 1) AS REAL) * 60) + (CAST(substring(\"T1\".\"FastestLapTime\", strpos(\"T1\".\"FastestLapTime\", ':') + 1, strpos(\"T1\".\"FastestLapTime\", '.') - strpos(\"T1\".\"FastestLapTime\", ':') - 1) AS REAL)) + (CAST(substring(\"T1\".\"FastestLapTime\", strpos(\"T1\".\"FastestLapTime\", '.') + 1) AS REAL) / 1000)) AS time_in_seconds FROM results AS \"T1\" WHERE \"T1\".\"FastestLapTime\" IS NOT NULL ) SELECT \"T1\".\"FastestLapTime\" AS lap_record FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN circuits AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) AS min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS \"T2\" ON fastest_lap_times.\"raceId\" = \"T2\".\"raceId\" INNER JOIN circuits AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" WHERE \"T3\".\"country\" = 'Italy' ) AS \"T4\" ON ((CAST(substring(\"T1\".\"FastestLapTime\", 1, strpos(\"T1\".\"FastestLapTime\", ':') - 1) AS REAL) * 60) + (CAST(substring(\"T1\".\"FastestLapTime\", strpos(\"T1\".\"FastestLapTime\", ':') + 1, strpos(\"T1\".\"FastestLapTime\", '.') - strpos(\"T1\".\"FastestLapTime\", ':') - 1) AS REAL)) + (CAST(substring(\"T1\".\"FastestLapTime\", strpos(\"T1\".\"FastestLapTime\", '.') + 1) AS REAL) / 1000)) = \"T4\".min_time_in_seconds LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1015,
    "difficulty": "moderate",
    "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "SQLite_query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
    "Postgres_query": "WITH fastest_lap_times AS ( SELECT \"T1\".\"raceId\", \"T1\".\"FastestLapTime\", ((CAST(SUBSTRING(\"T1\".\"FastestLapTime\", 1, POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL) * 60) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION(':' IN \"T1\".\"FastestLapTime\") + 1, POSITION('.' IN \"T1\".\"FastestLapTime\") - POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL)) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION('.' IN \"T1\".\"FastestLapTime\") + 1) AS REAL) / 1000)) AS time_in_seconds FROM results AS \"T1\" WHERE \"T1\".\"FastestLapTime\" IS NOT NULL ) SELECT \"T2\".\"name\" FROM races AS \"T2\" INNER JOIN circuits AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" INNER JOIN results AS \"T1\" ON \"T2\".\"raceId\" = \"T1\".\"raceId\" INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) AS min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS \"T2\" ON fastest_lap_times.\"raceId\" = \"T2\".\"raceId\" INNER JOIN circuits AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" WHERE \"T2\".\"name\" = 'Austrian Grand Prix' ) AS \"T4\" ON ((CAST(SUBSTRING(\"T1\".\"FastestLapTime\", 1, POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL) * 60) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION(':' IN \"T1\".\"FastestLapTime\") + 1, POSITION('.' IN \"T1\".\"FastestLapTime\") - POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL)) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION('.' IN \"T1\".\"FastestLapTime\") + 1) AS REAL) / 1000)) = \"T4\".min_time_in_seconds WHERE \"T2\".\"name\" = 'Austrian Grand Prix'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1016,
    "difficulty": "challenging",
    "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
    "evidence": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration",
    "SQLite_query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
    "Postgres_query": "WITH fastest_lap_times AS ( SELECT \"T1\".\"raceId\", \"T1\".\"driverId\", \"T1\".\"FastestLapTime\", ((CAST(SUBSTRING(\"T1\".\"FastestLapTime\", 1, POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL) * 60) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION(':' IN \"T1\".\"FastestLapTime\") + 1, POSITION('.' IN \"T1\".\"FastestLapTime\") - POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL)) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION('.' IN \"T1\".\"FastestLapTime\") + 1) AS REAL) / 1000)) AS time_in_seconds FROM results AS \"T1\" WHERE \"T1\".\"FastestLapTime\" IS NOT NULL ), lap_record_race AS ( SELECT \"T1\".\"raceId\", \"T1\".\"driverId\" FROM results AS \"T1\" INNER JOIN races AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN circuits AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) AS min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS \"T2\" ON fastest_lap_times.\"raceId\" = \"T2\".\"raceId\" INNER JOIN circuits AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" WHERE \"T2\".\"name\" = 'Austrian Grand Prix' ) AS \"T4\" ON ((CAST(SUBSTRING(\"T1\".\"FastestLapTime\", 1, POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL) * 60) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION(':' IN \"T1\".\"FastestLapTime\") + 1, POSITION('.' IN \"T1\".\"FastestLapTime\") - POSITION(':' IN \"T1\".\"FastestLapTime\") - 1) AS REAL)) + (CAST(SUBSTRING(\"T1\".\"FastestLapTime\", POSITION('.' IN \"T1\".\"FastestLapTime\") + 1) AS REAL) / 1000)) = \"T4\".min_time_in_seconds WHERE \"T2\".\"name\" = 'Austrian Grand Prix' ) SELECT \"T4\".\"duration\" FROM lap_record_race INNER JOIN pitStops AS \"T4\" ON lap_record_race.\"raceId\" = \"T4\".\"raceId\" AND lap_record_race.\"driverId\" = \"T4\".\"driverId\"",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1017,
    "difficulty": "moderate",
    "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
    "evidence": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)",
    "SQLite_query": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
    "Postgres_query": "SELECT \"T3\".\"lat\", \"T3\".\"lng\" FROM \"lapTimes\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" ON \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN \"circuits\" AS \"T3\" ON \"T2\".\"circuitId\" = \"T3\".\"circuitId\" WHERE \"T1\".\"time\" = '1:29.488'",
    "result_matched": false
  },
  {
    "db_id": "formula_1",
    "question_id": 1018,
    "difficulty": "simple",
    "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
    "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)",
    "SQLite_query": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "Postgres_query": "SELECT AVG(\"milliseconds\") FROM \"pitStops\" AS T1 INNER JOIN \"drivers\" AS T2 ON T1.\"driverId\" = T2.\"driverId\" WHERE T2.\"forename\" = 'Lewis' AND T2.\"surname\" = 'Hamilton'",
    "result_matched": true
  },
  {
    "db_id": "formula_1",
    "question_id": 1019,
    "difficulty": "moderate",
    "question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
    "evidence": "average = AVG(milliseconds)",
    "SQLite_query": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
    "Postgres_query": "SELECT CAST(SUM(\"T1\".\"milliseconds\") AS REAL) / COUNT(\"T1\".\"lap\") FROM \"lapTimes\" AS \"T1\" INNER JOIN \"races\" AS \"T2\" on \"T1\".\"raceId\" = \"T2\".\"raceId\" INNER JOIN \"circuits\" AS \"T3\" on \"T2\".\"circuitId\" = \"T3\".\"circuitId\" WHERE \"T3\".\"country\" = 'Italy'",
    "result_matched": false
  }
]