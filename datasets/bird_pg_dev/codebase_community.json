[
  {
    "db_id": "codebase_community",
    "question_id": 531,
    "difficulty": "simple",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
    "SQLite_query": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon') AND \"Reputation\" = ( SELECT MAX(\"Reputation\") FROM \"users\" WHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon') )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 532,
    "difficulty": "simple",
    "question": "Please list the display names of all the users whose accounts were created in the year 2014.",
    "evidence": "account created in the year 2014 refers to year(CreationDate) = 2014",
    "SQLite_query": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'",
    "Postgres_query": "SELECT \"DisplayName\" FROM users WHERE to_char(\"CreationDate\"::timestamp, 'YYYY') = '2014'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 533,
    "difficulty": "simple",
    "question": "How many users last accessed the website after 2014/9/1?",
    "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00'",
    "SQLite_query": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"users\" WHERE to_char(\"LastAccessDate\"::timestamp, 'YYYY-MM-DD') > '2014-09-01'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 534,
    "difficulty": "simple",
    "question": "What is the display name of the user who has the most number of views?",
    "evidence": "user who has the most number of view refers to Max(Views)",
    "SQLite_query": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"Views\" = ( SELECT MAX(\"Views\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 535,
    "difficulty": "simple",
    "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
    "evidence": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1",
    "SQLite_query": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"users\" WHERE \"Upvotes\" > 100 AND \"Downvotes\" > 1",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 536,
    "difficulty": "simple",
    "question": "How many users with more than 10 views created their account after the year 2013?",
    "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013",
    "SQLite_query": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"users\" WHERE to_char(\"CreationDate\"::timestamp, 'YYYY') > '2013' AND \"Views\" > 10",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 537,
    "difficulty": "simple",
    "question": "How many posts does the user csgillespie own?",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "SQLite_query": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"id\") FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 538,
    "difficulty": "simple",
    "question": "Please list the titles of the posts owned by the user csgillespie?",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "SQLite_query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT \"T1\".\"Title\" FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 539,
    "difficulty": "simple",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "SQLite_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\" FROM posts AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Title\" = 'Eliciting priors from experts'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 540,
    "difficulty": "simple",
    "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "SQLite_query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"Title\" FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie' ORDER BY \"T1\".\"ViewCount\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 541,
    "difficulty": "simple",
    "question": "What is the display name of the user who is the owner of the most valuable post?",
    "evidence": "most valuable post refers to Max(FavoriteCount)",
    "SQLite_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\" FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" ORDER BY \"T1\".\"FavoriteCount\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 542,
    "difficulty": "simple",
    "question": "What is the total number of comments of all the posts owned by csgillespie?",
    "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)",
    "SQLite_query": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT SUM(\"T1\".\"CommentCount\") FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 543,
    "difficulty": "simple",
    "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
    "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)",
    "SQLite_query": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT MAX(\"T1\".\"AnswerCount\") FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 544,
    "difficulty": "moderate",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "SQLite_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\" FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"LastEditorUserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Title\" = 'Examples for teaching: Correlation does not mean causation'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 545,
    "difficulty": "simple",
    "question": "Among the posts owned by csgillespie, how many of them are root posts?",
    "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie' AND \"T1\".\"ParentId\" IS NULL",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 546,
    "difficulty": "simple",
    "question": "Please list the display names of all the users who owns a post that is well-finished.",
    "evidence": "the post that is well-finished refers to ClosedDate IS NOT Null",
    "SQLite_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\" FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T1\".\"ClosedDate\" IS NOT NULL",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 547,
    "difficulty": "simple",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "evidence": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Score\" >= 20 AND \"T2\".\"Age\" > 65",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 548,
    "difficulty": "simple",
    "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "SQLite_query": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "Postgres_query": "SELECT \"T2\".\"Location\" FROM posts AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Title\" = 'Eliciting priors from experts'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 549,
    "difficulty": "simple",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "SQLite_query": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "Postgres_query": "SELECT \"T2\".\"Body\" FROM \"tags\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T2\".\"Id\" = \"T1\".\"ExcerptPostId\" WHERE \"T1\".\"TagName\" = 'bayesian'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 550,
    "difficulty": "simple",
    "question": "From which post is the most popular tag excerpted from? Please give the body of the post.",
    "evidence": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId",
    "SQLite_query": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )",
    "Postgres_query": "SELECT \"Body\" FROM \"posts\" WHERE \"id\" = ( SELECT \"ExcerptPostId\" FROM \"tags\" ORDER BY \"Count\" DESC NULLS LAST LIMIT 1 )",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 551,
    "difficulty": "simple",
    "question": "How many badges has the user csgillespie obtained?",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 552,
    "difficulty": "simple",
    "question": "Please list the names of the badges obtained by csgillespie.",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "SQLite_query": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT \"T1\".\"Name\" FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 553,
    "difficulty": "simple",
    "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
    "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE to_char(\"T1\".\"Date\"::timestamp, 'YYYY') = '2011' AND \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 554,
    "difficulty": "simple",
    "question": "What is the display name of the user who has obtained the most number of badges?",
    "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))",
    "SQLite_query": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\" FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" GROUP BY \"T2\".\"DisplayName\" ORDER BY count(\"T1\".\"Id\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 555,
    "difficulty": "simple",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
    "SQLite_query": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "Postgres_query": "SELECT AVG(\"T1\".\"Score\") FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'csgillespie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 556,
    "difficulty": "simple",
    "question": "What is the average number of badges obtained by a user with over 200 views?",
    "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))",
    "SQLite_query": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
    "Postgres_query": "SELECT CAST(COUNT(\"T1\".\"Id\") AS REAL) / COUNT(DISTINCT \"T2\".\"DisplayName\") FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T2\".\"Views\" > 200",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 557,
    "difficulty": "moderate",
    "question": "Among the posts with a score of over 20, what is the percentage of them being owned by an elder user?",
    "evidence": "score of over 20 refers to Score > 20; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
    "SQLite_query": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 20",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T2\".\"Age\" > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"Id\") FROM posts AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Score\" > 20",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 558,
    "difficulty": "simple",
    "question": "How many votes did the user No.58 take on 2010/7/19?",
    "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'",
    "SQLite_query": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"votes\" WHERE \"UserId\" = 58 AND \"CreationDate\" = '2010-07-19'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 559,
    "difficulty": "simple",
    "question": "Indicate the creation date of the maximum number of votes.",
    "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))",
    "SQLite_query": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
    "Postgres_query": "SELECT \"CreationDate\" FROM \"votes\" GROUP BY \"CreationDate\" ORDER BY count(\"Id\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 560,
    "difficulty": "simple",
    "question": "Give the number of \"Revival\" badges.",
    "evidence": "number refers to Id; 'Revival' is the Name of badge",
    "SQLite_query": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"badges\" WHERE \"Name\" = 'Revival'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 561,
    "difficulty": "simple",
    "question": "What is the title for the post which got the highest score comment?",
    "evidence": "highest score comment refers to Max(comments.Score)",
    "SQLite_query": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )",
    "Postgres_query": "SELECT \"Title\" FROM \"posts\" WHERE \"Id\" = ( SELECT \"PostId\" FROM \"comments\" ORDER BY \"Score\" DESC NULLS LAST LIMIT 1 )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 562,
    "difficulty": "simple",
    "question": "For the post which got 1910 view counts, how many comments does it get?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"posts\" AS \"T1\" INNER JOIN \"comments\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T1\".\"ViewCount\" = 1910",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 563,
    "difficulty": "moderate",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
    "SQLite_query": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "Postgres_query": "SELECT \"T1\".\"FavoriteCount\" FROM posts AS \"T1\" INNER JOIN comments AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T2\".\"CreationDate\" = '2014-04-23 20:29:39.0' AND \"T2\".\"UserId\" = 3025",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 564,
    "difficulty": "simple",
    "question": "Give the only one comment text of the post with parent id 107829.",
    "evidence": "one comment refers to CommentCount = '1'",
    "SQLite_query": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1",
    "Postgres_query": "SELECT \"T2\".\"Text\" FROM posts AS \"T1\" INNER JOIN comments AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T1\".\"ParentId\" = 107829 AND \"T1\".\"CommentCount\" = 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 565,
    "difficulty": "moderate",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
    "SQLite_query": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "Postgres_query": "SELECT CASE WHEN \"T2\".\"ClosedDate\" IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS resylt FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T1\".\"UserId\" = 23853 AND \"T1\".\"CreationDate\" = '2013-07-12 09:08:18.0'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 566,
    "difficulty": "simple",
    "question": "For the owner user of post No. 65041, what is his/her reputation points?",
    "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation",
    "SQLite_query": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
    "Postgres_query": "SELECT \"T1\".\"Reputation\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T2\".\"Id\" = 65041",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 567,
    "difficulty": "simple",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "evidence": "\"Tiago Pasqualini\" is the DisplayName;",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T1\".\"DisplayName\" = 'Tiago Pasqualini'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 568,
    "difficulty": "simple",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "evidence": "vote no. 381800 refers to Id = '6347'",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"votes\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Id\" = 6347",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 569,
    "difficulty": "simple",
    "question": "Give the number of votes for the post about data visualization.",
    "evidence": "About data visualization is the Title that contains 'data visualization';",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'",
    "Postgres_query": "SELECT count(\"T1\".\"Id\") FROM posts AS \"T1\" INNER JOIN votes AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T1\".\"Title\" ILIKE '%data visualization%'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 570,
    "difficulty": "simple",
    "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "SQLite_query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "Postgres_query": "SELECT \"T2\".\"Name\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"DisplayName\" = 'DatEpicCoderGuyWhoPrograms'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 571,
    "difficulty": "moderate",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
    "SQLite_query": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
    "Postgres_query": "SELECT CAST(COUNT(\"T2\".\"Id\") AS NUMERIC) / COUNT(DISTINCT \"T1\".\"Id\") FROM votes AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"OwnerUserId\" WHERE \"T1\".\"UserId\" = 24",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 572,
    "difficulty": "moderate",
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "SQLite_query": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "Postgres_query": "SELECT \"ViewCount\" FROM posts WHERE \"Title\" = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 573,
    "difficulty": "simple",
    "question": "Write the contents of comments with a score of 17.",
    "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text",
    "SQLite_query": "SELECT Text FROM comments WHERE Score = 17",
    "Postgres_query": "SELECT \"Text\" FROM comments WHERE \"Score\" = 17",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 574,
    "difficulty": "simple",
    "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
    "evidence": "\"http://stackoverflow.com\" is the WebsiteUrl; user refers to DisplayName",
    "SQLite_query": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"WebsiteUrl\" = 'http://stackoverflow.com'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 575,
    "difficulty": "simple",
    "question": "What is the badge name that user 'SilentGhost' obtained?",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "SQLite_query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "Postgres_query": "SELECT \"T2\".\"Name\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"DisplayName\" = 'SilentGhost'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 576,
    "difficulty": "simple",
    "question": "Name the user that commented 'thank you user93!'",
    "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"comments\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Text\" = 'thank you user93!'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 577,
    "difficulty": "simple",
    "question": "Write all comments made by user 'A Lion.'",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "SQLite_query": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "Postgres_query": "SELECT \"T2\".\"Text\" FROM \"users\" AS \"T1\" INNER JOIN \"comments\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"DisplayName\" = 'A Lion'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 578,
    "difficulty": "moderate",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
    "SQLite_query": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\", \"T1\".\"Reputation\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T2\".\"Title\" = 'Understanding what Dassault iSight is doing?'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 579,
    "difficulty": "simple",
    "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
    "evidence": "\"How does gentle boosting differ from AdaBoost?\" is the Title of post; comments refers to Text",
    "SQLite_query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'",
    "Postgres_query": "SELECT \"T1\".\"Text\" FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T2\".\"Title\" = 'How does gentle boosting differ from AdaBoost?'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 580,
    "difficulty": "simple",
    "question": "Name 10 users with the badge name 'Necromancer.'",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Name\" = 'Necromancer' LIMIT 10",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 581,
    "difficulty": "moderate",
    "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post",
    "SQLite_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\" FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Title\" = 'Open source tools for visualizing multi-dimensional data?'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 582,
    "difficulty": "simple",
    "question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "SQLite_query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "Postgres_query": "SELECT \"T1\".\"Title\" FROM \"posts\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'Vebjorn Ljosa'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 583,
    "difficulty": "simple",
    "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
    "SQLite_query": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "Postgres_query": "SELECT SUM(\"T1\".\"Score\"), \"T2\".\"WebsiteUrl\" FROM posts AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'Yevgeny' GROUP BY \"T2\".\"WebsiteUrl\"",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 584,
    "difficulty": "moderate",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
    "SQLite_query": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "Postgres_query": "SELECT \"T2\".\"Comment\" FROM \"posts\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T1\".\"Title\" = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 585,
    "difficulty": "simple",
    "question": "How much is the total bounty amount of the post titled about 'data'",
    "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)",
    "SQLite_query": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
    "Postgres_query": "SELECT SUM(\"T2\".\"BountyAmount\") FROM \"posts\" AS \"T1\" INNER JOIN \"votes\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T1\".\"Title\" LIKE '%data%'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 586,
    "difficulty": "challenging",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "evidence": "\"bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName",
    "SQLite_query": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
    "Postgres_query": "SELECT \"T3\".\"DisplayName\", \"T1\".\"Title\" FROM \"posts\" AS \"T1\" INNER JOIN \"votes\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" INNER JOIN \"users\" AS \"T3\" ON \"T3\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"BountyAmount\" = 50 AND \"T1\".\"Title\" ILIKE '%variance%'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 587,
    "difficulty": "moderate",
    "question": "Calculate the average view count of posts tagged as 'humor' and write the title and the comments of the posts alongside their scores if applicable.",
    "evidence": "\"humor\" is the Tags; comment of the post refers to Text; average view count = AVG(ViewCount)",
    "SQLite_query": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Tags = '<humor>'",
    "Postgres_query": "SELECT AVG(\"T2\".\"ViewCount\"), \"T2\".\"Title\", \"T1\".\"Text\" FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"Id\" = \"T1\".\"PostId\" WHERE \"T2\".\"Tags\" = '<humor>'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 588,
    "difficulty": "simple",
    "question": "Give the total number of comments posted by user ID 13.",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
    "Postgres_query": "SELECT count(\"Id\") FROM \"comments\" WHERE \"UserId\" = 13",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 589,
    "difficulty": "simple",
    "question": "Which user ID has the highest reputation?",
    "evidence": "highest reputation refers to Max(Reputation)",
    "SQLite_query": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "Postgres_query": "SELECT \"Id\" FROM \"users\" WHERE \"Reputation\" = ( SELECT MAX(\"Reputation\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 590,
    "difficulty": "simple",
    "question": "Which user ID has the lowest view?",
    "evidence": "lowest views refers to Min(Views)",
    "SQLite_query": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )",
    "Postgres_query": "SELECT \"Id\" FROM \"users\" WHERE \"Views\" = ( SELECT MIN(\"Views\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 591,
    "difficulty": "simple",
    "question": "How many users are awarded with supporter badge during year 2011?",
    "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011",
    "SQLite_query": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"badges\" WHERE to_char(\"Date\"::timestamp, 'YYYY') = '2011' AND \"Name\" = 'Supporter'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 592,
    "difficulty": "simple",
    "question": "How many users are awarded with more than 5 badges?",
    "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
    "SQLite_query": "SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
    "Postgres_query": "SELECT \"UserId\" FROM ( SELECT \"UserId\", COUNT(\"Name\") AS num FROM badges GROUP BY \"UserId\" ) T WHERE T.num > 5",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 593,
    "difficulty": "simple",
    "question": "How many users from New York have a teacher and supporter badge?",
    "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId",
    "SQLite_query": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
    "Postgres_query": "SELECT COUNT(DISTINCT \"T1\".\"Id\") FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Name\" IN ('Supporter', 'Teacher') AND \"T2\".\"Location\" = 'New York'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 594,
    "difficulty": "simple",
    "question": "Which user created post ID 1 and what is the reputation of this user?",
    "evidence": "",
    "SQLite_query": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
    "Postgres_query": "SELECT \"T2\".\"Id\", \"T2\".\"Reputation\" FROM comments AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"PostId\" = 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 595,
    "difficulty": "moderate",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
    "SQLite_query": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "Postgres_query": "SELECT \"T2\".\"UserId\" FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"posts\" AS \"T3\" ON \"T2\".\"PostId\" = \"T3\".\"Id\" WHERE \"T3\".\"ViewCount\" >= 1000 GROUP BY \"T2\".\"UserId\" HAVING COUNT(DISTINCT \"T2\".\"PostHistoryTypeId\") = 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 596,
    "difficulty": "simple",
    "question": "Which users have posted the most comments. List out the user's badge?",
    "evidence": "user with the most comments refers to UserId where Max(Count(Id)",
    "SQLite_query": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
    "Postgres_query": "SELECT \"Name\" FROM \"badges\" AS T1 INNER JOIN \"comments\" AS T2 ON T1.\"UserId\" = T2.\"UserId\" GROUP BY T2.\"UserId\" ORDER BY count(T2.\"UserId\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 597,
    "difficulty": "simple",
    "question": "How many users from India have the teacher badges?",
    "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T2\".\"Location\" = 'India' AND \"T1\".\"Name\" = 'Teacher'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 598,
    "difficulty": "challenging",
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "evidence": "\"Students\" is the Name of badge;\u00a0 during 2010 refers to Year(Date) = 2010; 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)",
    "SQLite_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
    "Postgres_query": "SELECT (CAST(SUM(CASE WHEN to_char(\"Date\"::timestamp, 'YYYY') = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"Id\")) - (CAST(SUM(CASE WHEN to_char(\"Date\"::timestamp, 'YYYY') = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"Id\")) FROM \"badges\" WHERE \"Name\" = 'Student'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 599,
    "difficulty": "simple",
    "question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
    "evidence": "",
    "SQLite_query": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
    "Postgres_query": "SELECT \"T1\".\"PostHistoryTypeId\", (SELECT COUNT(DISTINCT \"UserId\") FROM comments WHERE \"PostId\" = 3720) AS \"NumberOfUsers\" FROM \"postHistory\" AS \"T1\" WHERE \"T1\".\"PostId\" = 3720",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 600,
    "difficulty": "simple",
    "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
    "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount",
    "SQLite_query": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
    "Postgres_query": "SELECT \"T1\".\"ViewCount\" FROM posts AS \"T1\" INNER JOIN postlinks AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T2\".\"PostId\" = 61217",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 601,
    "difficulty": "simple",
    "question": "What is the score and the link type ID for post ID 395?",
    "evidence": "",
    "SQLite_query": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395",
    "Postgres_query": "SELECT \"T1\".\"Score\", \"T2\".\"LinkTypeId\" FROM posts AS \"T1\" INNER JOIN postLinks AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T2\".\"PostId\" = 395",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 602,
    "difficulty": "simple",
    "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.",
    "evidence": "score more than 60 refers to Score > 60",
    "SQLite_query": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )",
    "Postgres_query": "SELECT \"PostId\", \"UserId\" FROM \"postHistory\" WHERE \"PostId\" IN ( SELECT \"Id\" FROM \"posts\" WHERE \"Score\" > 60 )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 603,
    "difficulty": "simple",
    "question": "What is the sum of favourite count gained by user ID 686 in 2011?",
    "evidence": "in 2011 refers to year (CreatinDate) = 2011",
    "SQLite_query": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
    "Postgres_query": "SELECT SUM(DISTINCT \"FavoriteCount\") FROM \"posts\" WHERE \"Id\" IN ( SELECT \"PostId\" FROM \"postHistory\" WHERE \"UserId\" = 686 AND to_char(\"CreationDate\"::timestamp, 'YYYY') = '2011' )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 604,
    "difficulty": "moderate",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "evidence": "creating more than 10 post refers to Count (UserId) > 10; up votes average = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))",
    "SQLite_query": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
    "Postgres_query": "SELECT AVG(\"T1\".\"UpVotes\"), AVG(\"T1\".\"Age\") FROM \"users\" AS \"T1\" INNER JOIN ( SELECT \"OwnerUserId\", COUNT(*) AS post_count FROM \"posts\" GROUP BY \"OwnerUserId\" HAVING post_count > 10) AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\"",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 605,
    "difficulty": "simple",
    "question": "How many users obtained the \"Announcer\" badge?",
    "evidence": "\"Announcer\" is the Name of badge; user refers to UserId",
    "SQLite_query": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"badges\" WHERE \"Name\" = 'Announcer'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 606,
    "difficulty": "simple",
    "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'",
    "SQLite_query": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
    "Postgres_query": "SELECT \"Name\" FROM \"badges\" WHERE \"Date\" = '2010-07-19 19:39:08.0'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 607,
    "difficulty": "simple",
    "question": "How many positive comments are there on the list?",
    "evidence": "Positive comment refers to score > 60",
    "SQLite_query": "SELECT COUNT(id) FROM comments WHERE score > 60",
    "Postgres_query": "SELECT count(\"id\") FROM \"comments\" WHERE \"score\" > 60",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 608,
    "difficulty": "simple",
    "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
    "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'",
    "SQLite_query": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
    "Postgres_query": "SELECT \"Text\" FROM comments WHERE \"CreationDate\" = '2010-07-19 19:16:14.0'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 609,
    "difficulty": "simple",
    "question": "How many posts have a score of 10 on the list?",
    "evidence": "score of 10 refers to Score = 10; post refers to Id",
    "SQLite_query": "SELECT COUNT(id) FROM posts WHERE Score = 10",
    "Postgres_query": "SELECT count(\"id\") FROM \"posts\" WHERE \"Score\" = 10",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 610,
    "difficulty": "simple",
    "question": "What are the names of badges that users who have the highest reputation obtained?",
    "evidence": "highest reputation refers to Max(Reputation); user refers to UserId",
    "SQLite_query": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"name\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" ORDER BY \"T1\".\"Reputation\" DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 611,
    "difficulty": "simple",
    "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "SQLite_query": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "Postgres_query": "SELECT \"T1\".\"Reputation\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Date\" = '2010-07-19 19:39:08.0'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 612,
    "difficulty": "simple",
    "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "evidence": "",
    "SQLite_query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "Postgres_query": "SELECT \"T2\".\"Name\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"DisplayName\" = 'Pierre'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 613,
    "difficulty": "simple",
    "question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "SQLite_query": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "Postgres_query": "SELECT \"T2\".\"Date\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"Location\" = 'Rochester, NY'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 614,
    "difficulty": "simple",
    "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
    "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100",
    "SQLite_query": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
    "Postgres_query": "SELECT (CAST(COUNT(\"T1\".\"Id\") AS FLOAT) * 100) / (SELECT COUNT(\"Id\") FROM \"users\") FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Name\" = 'Teacher'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 615,
    "difficulty": "moderate",
    "question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
    "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100",
    "SQLite_query": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T2\".\"Age\" BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"Id\") FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Name\" = 'Organizer'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 616,
    "difficulty": "simple",
    "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
    "evidence": "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'",
    "SQLite_query": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'",
    "Postgres_query": "SELECT \"T1\".\"Score\" FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T1\".\"CreationDate\" = '2010-07-19 19:19:56.0'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 617,
    "difficulty": "simple",
    "question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?",
    "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'",
    "SQLite_query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'",
    "Postgres_query": "SELECT \"T1\".\"Text\" FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T1\".\"CreationDate\" = '2010-07-19 19:37:33.0'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 618,
    "difficulty": "simple",
    "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "evidence": "\"Vienna, Austria\" is the Location",
    "SQLite_query": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "Postgres_query": "SELECT \"T1\".\"Age\" FROM users AS \"T1\" INNER JOIN badges AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"Location\" = 'Vienna, Austria'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 619,
    "difficulty": "simple",
    "question": "How many adults who obtained the badge Supporter?",
    "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Name\" = 'Supporter' AND \"T1\".\"Age\" BETWEEN 19 AND 65",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 620,
    "difficulty": "simple",
    "question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "SQLite_query": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "Postgres_query": "SELECT \"T1\".\"Views\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Date\" = '2010-07-19 19:39:08.0'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 621,
    "difficulty": "simple",
    "question": "What are the name of badges that users who have the lowest reputation obtained?",
    "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId",
    "SQLite_query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
    "Postgres_query": "SELECT \"T2\".\"Name\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"Reputation\" = (SELECT MIN(\"Reputation\") FROM \"users\")",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 622,
    "difficulty": "simple",
    "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "SQLite_query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "Postgres_query": "SELECT \"T2\".\"Name\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"DisplayName\" = 'Sharpie'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 623,
    "difficulty": "simple",
    "question": "How many elders obtained the \"Supporter\" badge?",
    "evidence": "\"Supporter\" is the Name of badge;\u00a0 elders refers to Age > 65",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"Age\" > 65 AND \"T2\".\"Name\" = 'Supporter'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 624,
    "difficulty": "simple",
    "question": "What is the name of user with the ID of 30?",
    "evidence": "name of user refers to DisplayName;",
    "SQLite_query": "SELECT DisplayName FROM users WHERE Id = 30",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"Id\" = 30",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 625,
    "difficulty": "simple",
    "question": "How many users were from New York?",
    "evidence": "New York refers to Location;",
    "SQLite_query": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"users\" WHERE \"Location\" = 'New York'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 626,
    "difficulty": "simple",
    "question": "How many votes were made in 2010?",
    "evidence": "YEAR(CreationDate) = 2010;",
    "SQLite_query": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"votes\" WHERE to_char(\"CreationDate\"::timestamp, 'YYYY') = '2010'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 627,
    "difficulty": "simple",
    "question": "How many users were adult?",
    "evidence": "adult refers to user where Age BETWEEN 19 and 65;",
    "SQLite_query": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
    "Postgres_query": "SELECT count(\"id\") FROM \"users\" WHERE \"Age\" BETWEEN 19 AND 65",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 628,
    "difficulty": "simple",
    "question": "Which users have the highest number of views?",
    "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);",
    "SQLite_query": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "Postgres_query": "SELECT \"Id\", \"DisplayName\" FROM \"users\" WHERE \"Views\" = ( SELECT MAX(\"Views\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 629,
    "difficulty": "simple",
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;",
    "SQLite_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN to_char(\"CreationDate\"::timestamp, 'YYYY') = '2010' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN to_char(\"CreationDate\"::timestamp, 'YYYY') = '2011' THEN 1 ELSE 0 END) FROM \"votes\"",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 630,
    "difficulty": "simple",
    "question": "What is the name of tags used by John Stauffer's?",
    "evidence": "DisplayName = 'John Stauffer';",
    "SQLite_query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "Postgres_query": "SELECT \"T3\".\"Tags\" FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"posts\" AS \"T3\" ON \"T2\".\"PostId\" = \"T3\".\"Id\" WHERE \"T1\".\"DisplayName\" = 'John Salvatier'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 631,
    "difficulty": "simple",
    "question": "How many posts were created by Daniel Vassallo?",
    "evidence": "DisplayName = 'Daniel Vassallo';",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"DisplayName\" = 'Daniel Vassallo'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 632,
    "difficulty": "simple",
    "question": "How many votes were made by Harlan?",
    "evidence": "DisplayName = 'Harlan';",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"votes\" AS \"T3\" ON \"T3\".\"PostId\" = \"T2\".\"PostId\" WHERE \"T1\".\"DisplayName\" = 'Harlan'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 633,
    "difficulty": "moderate",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "evidence": "most answers count refers to MAX(AnswerCount); DisplayName = 'slashnick';",
    "SQLite_query": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"PostId\" FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"posts\" AS \"T3\" ON \"T2\".\"PostId\" = \"T3\".\"Id\" WHERE \"T1\".\"DisplayName\" = 'slashnick' ORDER BY \"T3\".\"AnswerCount\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 634,
    "difficulty": "challenging",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "evidence": "Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"posts\" AS \"T3\" ON \"T2\".\"PostId\" = \"T3\".\"Id\" WHERE \"T1\".\"DisplayName\" = 'Harvey Motulsky' OR \"T1\".\"DisplayName\" = 'Noah Snyder' GROUP BY \"T1\".\"DisplayName\" ORDER BY sum(\"T3\".\"ViewCount\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 635,
    "difficulty": "moderate",
    "question": "How many posts by Matt Parker have more than 4 votes?",
    "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"posts\" AS \"T3\" ON \"T2\".\"PostId\" = \"T3\".\"Id\" INNER JOIN \"votes\" AS \"T4\" ON \"T4\".\"PostId\" = \"T3\".\"Id\" WHERE \"T1\".\"DisplayName\" = 'Matt Parker' GROUP BY \"T2\".\"PostId\", \"T4\".\"Id\" HAVING COUNT(\"T4\".\"Id\") > 4",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 636,
    "difficulty": "simple",
    "question": "How many negative comments did Neil McGuigan get in his posts?",
    "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';",
    "SQLite_query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60",
    "Postgres_query": "SELECT COUNT(\"T3\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" INNER JOIN \"comments\" AS \"T3\" ON \"T2\".\"Id\" = \"T3\".\"PostId\" WHERE \"T1\".\"DisplayName\" = 'Neil McGuigan' AND \"T3\".\"Score\" < 60",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 637,
    "difficulty": "moderate",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "evidence": "DisplayName = 'Mark Meckes';",
    "SQLite_query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "Postgres_query": "SELECT \"T3\".\"Tags\" FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"posts\" AS \"T3\" ON \"T3\".\"Id\" = \"T2\".\"PostId\" WHERE \"T1\".\"DisplayName\" = 'Mark Meckes' AND \"T3\".\"CommentCount\" = 0",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 638,
    "difficulty": "simple",
    "question": "List all the name of users that obtained the Organizer Badges.",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Name\" = 'Organizer'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 639,
    "difficulty": "challenging",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "evidence": "DIVIDE(COUNT(PostId WHERE TagName = R language)), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
    "SQLite_query": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T3\".\"TagName\" = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"postHistory\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN \"tags\" AS \"T3\" ON \"T3\".\"ExcerptPostId\" = \"T2\".\"PostId\" WHERE \"T1\".\"DisplayName\" = 'Community'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 640,
    "difficulty": "moderate",
    "question": "Calculate the difference in view count from post posted by mornington and view count from posts posted by Amos.",
    "evidence": "SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
    "SQLite_query": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
    "Postgres_query": "SELECT SUM(CASE WHEN \"T1\".\"DisplayName\" = 'Mornington' THEN \"T3\".\"ViewCount\" ELSE 0 END) - SUM(CASE WHEN \"T1\".\"DisplayName\" = 'Amos' THEN \"T3\".\"ViewCount\" ELSE 0 END) AS diff FROM users AS \"T1\" INNER JOIN postHistory AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" INNER JOIN posts AS \"T3\" ON \"T3\".\"Id\" = \"T2\".\"PostId\"",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 641,
    "difficulty": "simple",
    "question": "How many users received commentator badges in 2014?",
    "evidence": "commentator is the name of the badge; year(Date) = 2014;",
    "SQLite_query": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"badges\" WHERE \"Name\" = 'Commentator' AND to_char(\"Date\"::timestamp, 'YYYY') = '2014'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 642,
    "difficulty": "simple",
    "question": "How many posts were created on 21st July, 2010?",
    "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';",
    "SQLite_query": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"postHistory\" WHERE to_char(\"CreationDate\"::timestamp, 'YYYY-MM-DD') = '2010-07-21'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 643,
    "difficulty": "simple",
    "question": "What are the display names and ages of user who got the highest in views?",
    "evidence": "the highest in views refers to MAX(Views);",
    "SQLite_query": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "Postgres_query": "SELECT \"DisplayName\", \"Age\" FROM \"users\" WHERE \"Views\" = ( SELECT MAX(\"Views\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 644,
    "difficulty": "simple",
    "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "SQLite_query": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "Postgres_query": "SELECT \"LastEditDate\", \"LastEditorUserId\" FROM \"posts\" WHERE \"Title\" = 'Detecting a given face in a database of facial images'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 645,
    "difficulty": "simple",
    "question": "How many negative comments were given by user ID 13?",
    "evidence": "negative comments refer to Score < 60;",
    "SQLite_query": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"comments\" WHERE \"UserId\" = 13 AND \"Score\" < 60",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 646,
    "difficulty": "simple",
    "question": "Describe the post title which got positive comments and display names of the users who posted those comments.",
    "evidence": "positive comments refer to Score > 60;",
    "SQLite_query": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60",
    "Postgres_query": "SELECT \"T1\".\"Title\", \"T2\".\"UserDisplayName\" FROM posts AS \"T1\" INNER JOIN comments AS \"T2\" ON \"T2\".\"PostId\" = \"T2\".\"Id\" WHERE \"T1\".\"Score\" > 60",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 647,
    "difficulty": "simple",
    "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "SQLite_query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "Postgres_query": "SELECT \"T2\".\"Name\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE to_char(\"T2\".\"Date\"::timestamp, 'YYYY') = '2011' AND \"T1\".\"Location\" = 'North Pole'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 648,
    "difficulty": "simple",
    "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.",
    "evidence": "favorite count of more than 150 refers to FavoriteCount > 150;",
    "SQLite_query": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\", \"T1\".\"WebsiteUrl\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T2\".\"FavoriteCount\" > 150",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 649,
    "difficulty": "simple",
    "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
    "evidence": "",
    "SQLite_query": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
    "Postgres_query": "SELECT \"T1\".\"Id\", \"T2\".\"LastEditDate\" FROM \"postHistory\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T2\".\"Title\" = 'What is the best introductory Bayesian statistics textbook?'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 650,
    "difficulty": "simple",
    "question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "evidence": "Outliers is the name of the badge;",
    "SQLite_query": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "Postgres_query": "SELECT \"T1\".\"LastAccessDate\", \"T1\".\"Location\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Name\" = 'outliers'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 651,
    "difficulty": "simple",
    "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
    "evidence": "",
    "SQLite_query": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
    "Postgres_query": "SELECT \"T3\".\"Title\" FROM \"postLinks\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" INNER JOIN \"posts\" AS \"T3\" ON \"T1\".\"RelatedPostId\" = \"T3\".\"Id\" WHERE \"T2\".\"Title\" = 'How to tell if something happened in a data set which monitors a value over time'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 652,
    "difficulty": "moderate",
    "question": "List the post IDs and badge names of the user Samuel in 2013.",
    "evidence": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;",
    "SQLite_query": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
    "Postgres_query": "SELECT \"T1\".\"PostId\", \"T2\".\"Name\" FROM \"postHistory\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"UserId\" WHERE \"T1\".\"UserDisplayName\" = 'Samuel' AND to_char(\"T1\".\"CreationDate\"::timestamp, 'YYYY') = '2013' AND to_char(\"T2\".\"Date\"::timestamp, 'YYYY') = '2013'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 653,
    "difficulty": "simple",
    "question": "What is the owner's display name of the most popular post?",
    "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);",
    "SQLite_query": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"Id\" = ( SELECT \"OwnerUserId\" FROM \"posts\" ORDER BY \"ViewCount\" DESC NULLS LAST LIMIT 1 )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 654,
    "difficulty": "moderate",
    "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
    "SQLite_query": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "Postgres_query": "SELECT \"T3\".\"DisplayName\", \"T3\".\"Location\" FROM \"tags\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"ExcerptPostId\" = \"T2\".\"Id\" INNER JOIN \"users\" AS \"T3\" ON \"T3\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T1\".\"TagName\" = 'hypothesis-testing'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 655,
    "difficulty": "simple",
    "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
    "evidence": "Title = 'What are principal component scores?';",
    "SQLite_query": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'",
    "Postgres_query": "SELECT \"T3\".\"Title\", \"T2\".\"LinkTypeId\" FROM posts AS \"T1\" INNER JOIN postLinks AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" INNER JOIN posts AS \"T3\" ON \"T2\".\"RelatedPostId\" = \"T3\".\"Id\" WHERE \"T1\".\"Title\" = 'What are principal component scores?'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 656,
    "difficulty": "simple",
    "question": "Describe the display name of the parent ID for child post with the highest score.",
    "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);",
    "SQLite_query": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"Id\" = ( SELECT \"OwnerUserId\" FROM \"posts\" WHERE \"ParentId\" IS NOT NULL ORDER BY \"Score\" DESC NULLS LAST LIMIT 1 )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 657,
    "difficulty": "moderate",
    "question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
    "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);",
    "SQLite_query": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )",
    "Postgres_query": "SELECT \"DisplayName\", \"WebsiteUrl\" FROM \"users\" WHERE \"Id\" = ( SELECT \"UserId\" FROM \"votes\" WHERE \"VoteTypeId\" = 8 ORDER BY \"BountyAmount\" DESC LIMIT 1 )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 658,
    "difficulty": "simple",
    "question": "What are the titles of the top 5 posts with the highest popularity?",
    "evidence": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);",
    "SQLite_query": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
    "Postgres_query": "SELECT \"Title\" FROM \"posts\" ORDER BY \"ViewCount\" DESC NULLS LAST LIMIT 5",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 659,
    "difficulty": "simple",
    "question": "How many tags have post count between 5,000 to 7,000?",
    "evidence": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;",
    "SQLite_query": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"tags\" WHERE \"Count\" BETWEEN 5000 AND 7000",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 660,
    "difficulty": "simple",
    "question": "What is the owner user id of the most valuable post?",
    "evidence": "the most valuable post refers to MAX(FavoriteCount);",
    "SQLite_query": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
    "Postgres_query": "SELECT \"OwnerUserId\" FROM \"posts\" WHERE \"FavoriteCount\" = ( SELECT MAX(\"FavoriteCount\") FROM \"posts\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 661,
    "difficulty": "simple",
    "question": "How old is the most influential user?",
    "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);",
    "SQLite_query": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "Postgres_query": "SELECT \"Age\" FROM \"users\" WHERE \"Reputation\" = ( SELECT MAX(\"Reputation\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 662,
    "difficulty": "simple",
    "question": "How many posts with votes that were created in 2011 have a bounty of 50?",
    "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM posts AS \"T1\" INNER JOIN votes AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" WHERE \"T2\".\"BountyAmount\" = 50 AND to_char(\"T2\".\"CreationDate\"::timestamp, 'YYYY') = '2011'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 663,
    "difficulty": "simple",
    "question": "What is the id of the youngest user?",
    "evidence": "the youngest user refers to MIN(Age);",
    "SQLite_query": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )",
    "Postgres_query": "SELECT \"Id\" FROM \"users\" WHERE \"Age\" = ( SELECT MIN(\"Age\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 664,
    "difficulty": "simple",
    "question": "What is the score of the post with the most popular tag?",
    "evidence": "Higher view count means the post has higher popularity; the most popular tag refers to MAX(Count);",
    "SQLite_query": "SELECT Score FROM posts WHERE Id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )",
    "Postgres_query": "SELECT \"Score\" FROM \"posts\" WHERE \"Id\" = ( SELECT \"ExcerptPostId\" FROM \"tags\" ORDER BY \"Count\" DESC NULLS LAST LIMIT 1 )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 665,
    "difficulty": "moderate",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)",
    "SQLite_query": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
    "Postgres_query": "SELECT CAST(COUNT(\"T1\".\"Id\") AS REAL) / 12 FROM \"postLinks\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T2\".\"AnswerCount\" <= 2 AND to_char(\"T1\".\"CreationDate\"::timestamp, 'YYYY') = '2010'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 666,
    "difficulty": "simple",
    "question": "Among the posts that were voted by user 1465, what is the id of the most valuable post?",
    "evidence": "user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);",
    "SQLite_query": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"Id\" FROM votes AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T1\".\"UserId\" = 1465 ORDER BY \"T2\".\"FavoriteCount\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 667,
    "difficulty": "simple",
    "question": "What is the title of the post with the oldest post link?",
    "evidence": "the oldest post link refers to MIN(CreaionDate);",
    "SQLite_query": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"Title\" FROM \"posts\" AS \"T1\" INNER JOIN \"postLinks\" AS \"T2\" ON \"T2\".\"PostId\" = \"T1\".\"Id\" ORDER BY \"T1\".\"CreaionDate\" LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 668,
    "difficulty": "simple",
    "question": "What is the display name of the user who acquired the highest amount of badges?",
    "evidence": "highest amount of badges refers to MAX(COUNT(Name));",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" GROUP BY \"T1\".\"DisplayName\" ORDER BY count(\"T1\".\"Id\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 669,
    "difficulty": "simple",
    "question": "When did \"chl\" cast its first vote in a post?",
    "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
    "SQLite_query": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"CreationDate\" FROM \"users\" AS \"T1\" INNER JOIN \"votes\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T1\".\"DisplayName\" = 'chl' ORDER BY \"T2\".\"CreationDate\" NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 670,
    "difficulty": "simple",
    "question": "What is the date when the youngest user made his or her first post?",
    "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);",
    "SQLite_query": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"CreaionDate\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T1\".\"Age\" IS NOT NULL ORDER BY \"T1\".\"Age\", \"T2\".\"CreaionDate\" NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 671,
    "difficulty": "simple",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"badges\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Name\" = 'Autobiographer' ORDER BY \"T2\".\"Date\" NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 672,
    "difficulty": "moderate",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T1\".\"Location\" = 'United Kingdom' AND \"T2\".\"FavoriteCount\" >= 4",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 673,
    "difficulty": "simple",
    "question": "What is the average number of posts voted by the oldest users?",
    "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);",
    "SQLite_query": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
    "Postgres_query": "SELECT AVG(\"PostId\") FROM \"votes\" WHERE \"UserId\" IN ( SELECT \"Id\" FROM \"users\" WHERE \"Age\" = ( SELECT MAX(\"Age\") FROM \"users\" ) )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 674,
    "difficulty": "simple",
    "question": "Who has the highest reputation? Please give the display name.",
    "evidence": "the highest reputation refers to MAX(Reputation);",
    "SQLite_query": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"Reputation\" = ( SELECT MAX(\"Reputation\") FROM \"users\" )",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 675,
    "difficulty": "simple",
    "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?",
    "evidence": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;",
    "SQLite_query": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"users\" WHERE \"Reputation\" > 2000 AND \"Views\" > 1000",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 676,
    "difficulty": "simple",
    "question": "Please list all display names of users who are adults.",
    "evidence": "adults refer to users where Age BETWEEN 19 and 65;",
    "SQLite_query": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
    "Postgres_query": "SELECT \"DisplayName\" FROM \"users\" WHERE \"Age\" BETWEEN 19 AND 65",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 677,
    "difficulty": "simple",
    "question": "How many posts did Jay Stevens have in 2010?",
    "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE to_char(\"T2\".\"CreaionDate\"::timestamp, 'YYYY') = '2010' AND \"T1\".\"DisplayName\" = 'Jay Stevens'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 678,
    "difficulty": "simple",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "SQLite_query": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"Id\", \"T2\".\"Title\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T1\".\"DisplayName\" = 'Harvey Motulsky' ORDER BY \"T2\".\"ViewCount\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 679,
    "difficulty": "simple",
    "question": "Which post has the highest score? Please give its id and title's name.",
    "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;",
    "SQLite_query": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"Id\", \"T2\".\"Title\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" ORDER BY \"T2\".\"Score\" DESC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 680,
    "difficulty": "simple",
    "question": "What is the average score of Stephen Turner's posts?",
    "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);",
    "SQLite_query": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
    "Postgres_query": "SELECT AVG(\"T2\".\"Score\") FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE \"T1\".\"DisplayName\" = 'Stephen Turner'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 681,
    "difficulty": "simple",
    "question": "Please list the users' display names whose posts had over 20000 views in 2011.",
    "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;",
    "SQLite_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000",
    "Postgres_query": "SELECT \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE to_char(\"T2\".\"CreaionDate\"::timestamp, 'YYYY') = '2011' AND \"T2\".\"ViewCount\" > 20000",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 682,
    "difficulty": "moderate",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "evidence": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
    "SQLite_query": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"OwnerUserId\", \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" WHERE to_char(\"T1\".\"CreationDate\"::timestamp, 'YYYY') = '2010' ORDER BY \"T2\".\"FavoriteCount\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 683,
    "difficulty": "moderate",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "evidence": "DIVIDE(COUNT(Id where CreationDate = 2011 and Reputation > 1000), COUNT(Id) ) * 100 as percentage;",
    "SQLite_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN to_char(\"T2\".\"CreaionDate\"::timestamp, 'YYYY') = '2011' AND \"T1\".\"Reputation\" > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"Id\") FROM users AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\"",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 684,
    "difficulty": "simple",
    "question": "Identify the percentage of teenage users.",
    "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;",
    "SQLite_query": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"Age\" BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"Id\") FROM users",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 685,
    "difficulty": "moderate",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "evidence": "views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets';",
    "SQLite_query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "Postgres_query": "SELECT \"T2\".\"ViewCount\", \"T3\".\"DisplayName\" FROM \"postHistory\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" INNER JOIN \"users\" AS \"T3\" ON \"T2\".\"LastEditorUserId\" = \"T3\".\"Id\" WHERE \"T1\".\"Text\" = 'Computer Game Datasets'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 686,
    "difficulty": "simple",
    "question": "Identify the total number of posts with views above average.",
    "evidence": "views above average refer to ViewCount > AVG(ViewCount);",
    "SQLite_query": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
    "Postgres_query": "SELECT \"Id\" FROM \"posts\" WHERE \"ViewCount\" > ( SELECT AVG(\"ViewCount\") FROM \"posts\" )",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 687,
    "difficulty": "simple",
    "question": "How many comments were added to the post with the highest score?",
    "evidence": "the highest score refers to MAX(Score);",
    "SQLite_query": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
    "Postgres_query": "SELECT count(\"T2\".\"Id\") FROM \"posts\" AS \"T1\" INNER JOIN \"comments\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"PostId\" GROUP BY \"T1\".\"Id\" ORDER BY sum(\"T1\".\"Score\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 688,
    "difficulty": "simple",
    "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
    "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;",
    "SQLite_query": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"posts\" WHERE \"ViewCount\" > 35000 AND \"CommentCount\" = 0",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 689,
    "difficulty": "simple",
    "question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
    "evidence": "last to edit refers to MAX(LastEditDate);",
    "SQLite_query": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\", \"T2\".\"Location\" FROM posts AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"OwnerUserId\" = \"T2\".\"Id\" WHERE \"T2\".\"Id\" = 183 ORDER BY \"T1\".\"LastEditDate\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 690,
    "difficulty": "simple",
    "question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "SQLite_query": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"Name\" FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'Emmett' ORDER BY \"T1\".\"Date\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 691,
    "difficulty": "simple",
    "question": "Identify the number of adult users who have cast over 5000 upvotes.",
    "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;",
    "SQLite_query": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"users\" WHERE \"Age\" BETWEEN 19 AND 65 AND \"UpVotes\" > 5000",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 692,
    "difficulty": "moderate",
    "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "SQLite_query": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "Postgres_query": "SELECT \"T1\".\"Date\" - \"T2\".\"CreationDate\" FROM \"badges\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'Zolomon'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 693,
    "difficulty": "simple",
    "question": "Identify the number of posts and comments left by the user, who has the latest created user account.",
    "evidence": "the latest created user account refers to MAX(CreationDate);",
    "SQLite_query": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
    "Postgres_query": "SELECT count(\"T2\".\"Id\") FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" INNER JOIN \"comments\" AS \"T3\" ON \"T3\".\"PostId\" = \"T2\".\"Id\" ORDER BY \"T1\".\"CreationDate\" DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 694,
    "difficulty": "moderate",
    "question": "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "SQLite_query": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1",
    "Postgres_query": "SELECT \"T3\".\"Text\", \"T1\".\"DisplayName\" FROM \"users\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" INNER JOIN \"comments\" AS \"T3\" ON \"T2\".\"Id\" = \"T3\".\"PostId\" WHERE \"T2\".\"Title\" = 'Analysing wind data with R' ORDER BY \"T1\".\"CreationDate\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 695,
    "difficulty": "simple",
    "question": "How many users were awarded with 'Citizen Patrol' badge?",
    "evidence": "Citizen Patrol' is the name of the badge;",
    "SQLite_query": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"badges\" WHERE \"Name\" = 'Citizen Patrol'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 696,
    "difficulty": "simple",
    "question": "Count the number of posts with a tag specified as 'careers'.",
    "evidence": "tag specified as 'careers' refers to TagName = 'careers';",
    "SQLite_query": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
    "Postgres_query": "SELECT COUNT(\"Id\") FROM \"tags\" WHERE \"TagName\" = 'careers'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 697,
    "difficulty": "simple",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "evidence": "",
    "SQLite_query": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "Postgres_query": "SELECT \"Reputation\", \"Views\" FROM \"users\" WHERE \"DisplayName\" = 'Jarrod Dixon'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 698,
    "difficulty": "simple",
    "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "evidence": "",
    "SQLite_query": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "Postgres_query": "SELECT \"CommentCount\", \"AnswerCount\" FROM \"posts\" WHERE \"Title\" = 'Clustering 1D data'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 699,
    "difficulty": "simple",
    "question": "When did the user known as 'IrishStat' create his or her account?",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "SQLite_query": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "Postgres_query": "SELECT \"CreationDate\" FROM \"users\" WHERE \"DisplayName\" = 'IrishStat'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 700,
    "difficulty": "simple",
    "question": "Identify the number of posts that offer a bounty amount over 30.",
    "evidence": "bounty amount over 30 refers to BountyAmount > = 30;",
    "SQLite_query": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30",
    "Postgres_query": "SELECT count(\"id\") FROM \"votes\" WHERE \"BountyAmount\" >= 30",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 701,
    "difficulty": "challenging",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "evidence": "The user with higher reputation has more influence; DIVIDE(COUNT(stats_posts.Id where Score > = 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation)) as percentage;",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T2\".\"Score\" >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"Id\") FROM \"users\" \"T1\" INNER JOIN \"posts\" \"T2\" ON \"T1\".\"Id\" = \"T2\".\"OwnerUserId\" INNER JOIN ( SELECT MAX(\"Reputation\") AS \"max_reputation\" FROM \"users\" ) \"T3\" ON \"T1\".\"Reputation\" = \"T3\".\"max_reputation\"",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 702,
    "difficulty": "simple",
    "question": "How many posts have a score less than 20?",
    "evidence": "score less than 20 refers to Score < 20;",
    "SQLite_query": "SELECT COUNT(id) FROM posts WHERE Score < 20",
    "Postgres_query": "SELECT count(\"id\") FROM \"posts\" WHERE \"Score\" < 20",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 703,
    "difficulty": "simple",
    "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
    "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;",
    "SQLite_query": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"tags\" WHERE \"Count\" <= 20 AND \"Id\" < 15",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 704,
    "difficulty": "simple",
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "SQLite_query": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "Postgres_query": "SELECT \"ExcerptPostId\", \"WikiPostId\" FROM \"tags\" WHERE \"TagName\" = 'sample'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 705,
    "difficulty": "simple",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "evidence": "Text = 'fine, you win :)';",
    "SQLite_query": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "Postgres_query": "SELECT \"T2\".\"Reputation\", \"T2\".\"UpVotes\" FROM comments AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Text\" = 'fine, you win :)'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 706,
    "difficulty": "simple",
    "question": "Give the texts commented on the post about linear regression.",
    "evidence": "Title = 'How can I adapt ANOVA for binary data?';",
    "SQLite_query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'",
    "Postgres_query": "SELECT \"T1\".\"Text\" FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T2\".\"Title\" ILIKE '%linear regression%'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 707,
    "difficulty": "moderate",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);",
    "SQLite_query": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
    "Postgres_query": "SELECT \"Text\" FROM comments WHERE \"PostId\" IN ( SELECT \"Id\" FROM posts WHERE \"ViewCount\" BETWEEN 100 AND 150 ) ORDER BY \"Score\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 708,
    "difficulty": "moderate",
    "question": "List the creation date and age of the user that commented with webiste.",
    "evidence": "commented with webiste refers to the value contains 'http://'",
    "SQLite_query": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'",
    "Postgres_query": "SELECT \"T2\".\"CreationDate\", \"T2\".\"Age\" FROM comments AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"text\" LIKE '%http://%'",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 709,
    "difficulty": "simple",
    "question": "In comments with 0 score, how many of the posts have view count lower than 5?",
    "evidence": "view count lower than 5 refers to ViewCount < 5;",
    "SQLite_query": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
    "Postgres_query": "SELECT count(\"T1\".\"Id\") FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T2\".\"ViewCount\" < 5 AND \"T2\".\"Score\" = 0",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 710,
    "difficulty": "simple",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "evidence": "in posts with 1 comment refers to CommentCount = 1;",
    "SQLite_query": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "Postgres_query": "SELECT COUNT(\"T1\".\"id\") FROM \"comments\" AS \"T1\" INNER JOIN \"posts\" AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T2\".\"CommentCount\" = 1 AND \"T2\".\"Score\" = 0",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 711,
    "difficulty": "simple",
    "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
    "Postgres_query": "SELECT COUNT(\"T1\".\"id\") FROM \"comments\" AS \"T1\" INNER JOIN \"users\" AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Score\" = 0 AND \"T2\".\"Age\" = 40",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 712,
    "difficulty": "simple",
    "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "SQLite_query": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "Postgres_query": "SELECT \"T2\".\"Id\", \"T1\".\"Text\" FROM comments AS \"T1\" INNER JOIN posts AS \"T2\" ON \"T1\".\"PostId\" = \"T2\".\"Id\" WHERE \"T2\".\"Title\" = 'Group differences on a five point Likert item'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 713,
    "difficulty": "simple",
    "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
    "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;",
    "SQLite_query": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'",
    "Postgres_query": "SELECT \"T2\".\"UpVotes\" FROM comments AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Text\" = 'R is also lazy evaluated.'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 714,
    "difficulty": "simple",
    "question": "List the comments commented by the user with a username of Harvey Motulsky.",
    "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
    "SQLite_query": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
    "Postgres_query": "SELECT \"T1\".\"Text\" FROM comments AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T2\".\"DisplayName\" = 'Harvey Motulsky'",
    "result_matched": true
  },
  {
    "db_id": "codebase_community",
    "question_id": 715,
    "difficulty": "simple",
    "question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.",
    "evidence": "DownVotes = 0; Score BETWEEN 1 and 5",
    "SQLite_query": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
    "Postgres_query": "SELECT \"T2\".\"DisplayName\" FROM comments AS \"T1\" INNER JOIN users AS \"T2\" ON \"T1\".\"UserId\" = \"T2\".\"Id\" WHERE \"T1\".\"Score\" BETWEEN 1 AND 5 AND \"T2\".\"DownVotes\" = 0",
    "result_matched": false
  },
  {
    "db_id": "codebase_community",
    "question_id": 716,
    "difficulty": "moderate",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "evidence": "DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10)), (COUNT(UserId where Score BETWEEN 5 and 10)) as percentage;",
    "SQLite_query": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) / COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T1\".\"UpVotes\" = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(\"T1\".\"Id\") AS per FROM users AS \"T1\" INNER JOIN comments AS \"T2\" ON \"T1\".\"Id\" = \"T2\".\"UserId\" WHERE \"T2\".\"Score\" BETWEEN 5 AND 10",
    "result_matched": true
  }
]