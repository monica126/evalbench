[
  {
    "db_id": "european_football_2",
    "question_id": 1020,
    "difficulty": "simple",
    "question": "Which player has the highest overall rating? Indicate the player's api id.",
    "evidence": "highest overall rating refers to MAX(overall_rating);",
    "SQLite_query": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
    "Postgres_query": "SELECT \"player_api_id\" FROM \"Player_Attributes\" ORDER BY \"overall_rating\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1021,
    "difficulty": "simple",
    "question": "What is the height of the tallest player? Indicate his name.",
    "evidence": "tallest player refers to MAX(height);",
    "SQLite_query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" ORDER BY \"height\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1022,
    "difficulty": "simple",
    "question": "What is the preferred foot when attacking of the player with the lowest potential?",
    "evidence": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);",
    "SQLite_query": "SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1",
    "Postgres_query": "SELECT \"preferred_foot\" FROM \"Player_Attributes\" WHERE \"potential\" IS NOT NULL ORDER BY \"potential\" ASC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1023,
    "difficulty": "moderate",
    "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
    "evidence": "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';",
    "SQLite_query": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
    "Postgres_query": "SELECT count(\"id\") FROM \"Player_Attributes\" WHERE \"overall_rating\" BETWEEN 60 AND 65 AND \"defensive_work_rate\" = 'low'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1024,
    "difficulty": "simple",
    "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
    "evidence": "perform better in crossing actions refers to MAX(crossing)",
    "SQLite_query": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
    "Postgres_query": "SELECT \"id\" FROM \"Player_Attributes\" ORDER BY \"crossing\" DESC LIMIT 5",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1025,
    "difficulty": "moderate",
    "question": "Which league had the most goals in the 2016 season?",
    "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';",
    "SQLite_query": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
    "Postgres_query": "SELECT \"t2\".\"name\" FROM \"Match\" AS \"t1\" INNER JOIN \"League\" AS \"t2\" ON \"t1\".\"league_id\" = \"t2\".\"id\" WHERE \"t1\".\"season\" = '2015/2016' GROUP BY \"t2\".\"name\" ORDER BY SUM(\"t1\".\"home_team_goal\" + \"t1\".\"away_team_goal\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1026,
    "difficulty": "moderate",
    "question": "Which home team had lost the fewest matches in the 2016 season?",
    "evidence": "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';",
    "SQLite_query": "SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1",
    "Postgres_query": "SELECT \"teamDetails\".\"team_long_name\" FROM \"Match\" AS \"matchData\" INNER JOIN \"Team\" AS \"teamDetails\" ON \"matchData\".\"home_team_api_id\" = \"teamDetails\".\"team_api_id\" WHERE \"matchData\".\"season\" = '2015/2016' AND \"matchData\".\"home_team_goal\" - \"matchData\".\"away_team_goal\" < 0 GROUP BY \"matchData\".\"home_team_api_id\" ORDER BY count(*) ASC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1027,
    "difficulty": "simple",
    "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
    "evidence": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);",
    "SQLite_query": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
    "Postgres_query": "SELECT \"t2\".\"player_name\" FROM \"Player_Attributes\" AS \"t1\" INNER JOIN \"Player\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"id\" ORDER BY \"t1\".\"penalties\" DESC NULLS LAST LIMIT 10",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1028,
    "difficulty": "challenging",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010';",
    "SQLite_query": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
    "Postgres_query": "SELECT \"teamInfo\".\"team_long_name\" FROM \"League\" AS \"leagueData\" INNER JOIN \"Match\" AS \"matchData\" ON \"leagueData\".\"id\" = \"matchData\".\"league_id\" INNER JOIN \"Team\" AS \"teamInfo\" ON \"matchData\".\"away_team_api_id\" = \"teamInfo\".\"team_api_id\" WHERE \"leagueData\".\"name\" = 'Scotland Premier League' AND \"matchData\".\"season\" = '2009/2010' AND \"matchData\".\"away_team_goal\" - \"matchData\".\"home_team_goal\" > 0 GROUP BY \"matchData\".\"away_team_api_id\" ORDER BY count(*) DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1029,
    "difficulty": "moderate",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
    "SQLite_query": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlayDribbling ASC LIMIT 4",
    "Postgres_query": "SELECT \"t1\".\"buildUpPlaySpeed\" FROM \"Team_Attributes\" AS \"t1\" INNER JOIN \"Team\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" ORDER BY \"t1\".\"buildUpPlayDribbling\" ASC NULLS LAST LIMIT 4",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1030,
    "difficulty": "moderate",
    "question": "Which League had the most matches end as draw in the 2016 season?",
    "evidence": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';",
    "SQLite_query": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
    "Postgres_query": "SELECT \"t2\".\"name\" FROM \"Match\" AS \"t1\" INNER JOIN \"League\" AS \"t2\" ON \"t1\".\"league_id\" = \"t2\".\"id\" WHERE \"t1\".\"season\" = '2015/2016' AND \"t1\".\"home_team_goal\" = \"t1\".\"away_team_goal\" GROUP BY \"t2\".\"name\" ORDER BY count(\"t1\".\"id\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1031,
    "difficulty": "challenging",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "evidence": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint_speed > = 97; between 2013 to 2015 refers to date > = '2013-01-01 00:00:00' AND date < = '2015-12-31 00:00:00';",
    "SQLite_query": "SELECT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.`date`, 1, 10) BETWEEN '2013-01-01' AND '2015-12-31' AND t1.sprint_speed >= 97",
    "Postgres_query": "SELECT now() - \"T2\".\"birthday\" AS age FROM \"Player_Attributes\" AS \"t1\" INNER JOIN \"Player\" AS \"T2\" ON \"t1\".\"player_api_id\" = \"T2\".\"player_api_id\" WHERE substr(\"t1\".\"date\", 1, 10) BETWEEN '2013-01-01' AND '2015-12-31' AND \"t1\".\"sprint_speed\" >= 97",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1032,
    "difficulty": "moderate",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "evidence": "name of the league refers to League.name; league with highest matches of all time refers to MAX(COUNT(league_id));",
    "SQLite_query": "SELECT t2.name, COUNT(t1.id) FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
    "Postgres_query": "SELECT \"t2\".\"name\", COUNT(\"t1\".\"id\") FROM \"Match\" AS \"t1\" INNER JOIN \"League\" AS \"t2\" ON \"t1\".\"league_id\" = \"t2\".\"id\" GROUP BY \"t2\".\"name\" ORDER BY COUNT(\"t1\".\"id\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1033,
    "difficulty": "simple",
    "question": "What is the average height of players born between 1990 and 1995?",
    "evidence": "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';",
    "SQLite_query": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
    "Postgres_query": "SELECT SUM(\"height\") / COUNT(\"id\") FROM \"Player\" WHERE SUBSTRING(\"birthday\", 1, 4) BETWEEN '1990' AND '1995'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1034,
    "difficulty": "simple",
    "question": "List the players' api id who had the highest above average overall ratings in 2010.",
    "evidence": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';",
    "SQLite_query": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
    "Postgres_query": "SELECT \"player_api_id\" FROM \"Player_Attributes\" WHERE SUBSTRING(\"date\", 1, 4) = '2010' ORDER BY \"overall_rating\" DESC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1035,
    "difficulty": "simple",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed BETWEEN 51 AND 59;",
    "SQLite_query": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "Postgres_query": "SELECT DISTINCT \"team_fifa_api_id\" FROM \"Team_Attributes\" WHERE \"buildUpPlaySpeed\" > 50 AND \"buildUpPlaySpeed\" < 60",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1036,
    "difficulty": "challenging",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL) < buildUpPlayPassing; in 2012 refers to strftime('%Y', date) = '2012';",
    "SQLite_query": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '2012' )",
    "Postgres_query": "SELECT DISTINCT \"t4\".\"team_long_name\" FROM \"Team_Attributes\" AS \"t3\" INNER JOIN \"Team\" AS \"t4\" ON \"t3\".\"team_api_id\" = \"t4\".\"team_api_id\" WHERE substr(\"t3\".\"date\", 1, 4) = '2012' AND \"t3\".\"buildUpPlayPassing\" > ( SELECT CAST(SUM(\"t2\".\"buildUpPlayPassing\") AS double precision) / COUNT(\"t1\".\"id\") FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE substr(\"t2\".\"date\", 1, 4) = '2012' )",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1037,
    "difficulty": "challenging",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 1.0)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to birthday BETWEEN '1987-01-01 00:00:00'AND '1992-12-31 00:00:00';",
    "SQLite_query": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "Postgres_query": "SELECT CAST(COUNT(CASE WHEN \"t2\".\"preferred_foot\" = 'left' THEN \"t1\".\"id\" ELSE NULL END) AS REAL) * 100 / COUNT(\"t1\".\"id\") AS percent FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE SUBSTRING(\"t1\".\"birthday\", 1, 4) BETWEEN '1987' AND '1992'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1038,
    "difficulty": "moderate",
    "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
    "evidence": "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal);",
    "SQLite_query": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
    "Postgres_query": "SELECT \"t1\".\"name\", SUM(\"t2\".\"home_team_goal\") + SUM(\"t2\".\"away_team_goal\") FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" GROUP BY \"t1\".\"name\" ORDER BY SUM(\"t2\".\"home_team_goal\") + SUM(\"t2\".\"away_team_goal\") ASC LIMIT 5",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1039,
    "difficulty": "simple",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
    "SQLite_query": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "Postgres_query": "SELECT CAST(SUM(\"t2\".\"long_shots\") AS NUMERIC) / COUNT(\"t2\".\"date\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Ahmed Samir Farag'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1040,
    "difficulty": "moderate",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "evidence": "height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));",
    "SQLite_query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
    "Postgres_query": "SELECT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"height\" > 180 GROUP BY \"t1\".\"id\" ORDER BY CAST(SUM(\"t2\".\"heading_accuracy\") AS FLOAT) / COUNT(\"t2\".\"player_fifa_api_id\") DESC NULLS LAST LIMIT 10",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1041,
    "difficulty": "challenging",
    "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
    "SQLite_query": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "Postgres_query": "SELECT \"t3\".\"team_long_name\" FROM \"Team\" AS \"t3\" INNER JOIN \"Team_Attributes\" AS \"t4\" ON \"t3\".\"team_api_id\" = \"t4\".\"team_api_id\" WHERE \"t4\".\"buildUpPlayDribblingClass\" = 'Normal' AND \"t4\".\"chanceCreationPassing\" < ( SELECT CAST(SUM(\"t2\".\"chanceCreationPassing\") AS double precision) / COUNT(\"t1\".\"id\") FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"buildUpPlayDribblingClass\" = 'Normal' AND substr(\"t2\".\"date\", 1, 4) = '2014') ORDER BY \"t4\".\"chanceCreationPassing\" DESC NULLS LAST",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1042,
    "difficulty": "challenging",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal);",
    "SQLite_query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
    "Postgres_query": "SELECT \"t1\".\"name\" FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t2\".\"season\" = '2009/2010' GROUP BY \"t1\".\"name\" HAVING (CAST(SUM(\"t2\".\"home_team_goal\") AS double precision) / COUNT(DISTINCT \"t2\".\"id\")) - (CAST(SUM(\"t2\".\"away_team_goal\") AS double precision) / COUNT(DISTINCT \"t2\".\"id\")) > 0",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1043,
    "difficulty": "simple",
    "question": "What is the short name of the football team Queens Park Rangers?",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "SQLite_query": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "Postgres_query": "SELECT \"team_short_name\" FROM \"Team\" WHERE \"team_long_name\" = 'Queens Park Rangers'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1044,
    "difficulty": "simple",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "evidence": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,4) AS year, substr(birthday,6,2) AS month WHERE year = '1970' AND month = '10';",
    "SQLite_query": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" WHERE SUBSTRING(\"birthday\", 1, 7) = '1970-10'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1045,
    "difficulty": "simple",
    "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "evidence": "",
    "SQLite_query": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "Postgres_query": "SELECT DISTINCT \"t2\".\"attacking_work_rate\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Franco Zennaro'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1046,
    "difficulty": "moderate",
    "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "SQLite_query": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "Postgres_query": "SELECT DISTINCT \"t2\".\"buildUpPlayPositioningClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_attributes\" AS \"t2\" ON \"t1\".\"team_fifa_api_id\" = \"t2\".\"team_fifa_api_id\" WHERE \"t1\".\"team_long_name\" = 'ADO Den Haag'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1047,
    "difficulty": "moderate",
    "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "SQLite_query": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "Postgres_query": "SELECT \"t2\".\"heading_accuracy\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Francois Affolter' AND substr(\"t2\".\"date\", 1, 10) = '2014-09-18'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1048,
    "difficulty": "simple",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "SQLite_query": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND SUBSTR(t2.`date`, 1, 4) = '2011'",
    "Postgres_query": "SELECT \"t2\".\"overall_rating\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Gabriel Tamas' AND substr(\"t2\".\"date\", 1, 4) = '2011'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1049,
    "difficulty": "simple",
    "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
    "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League';",
    "SQLite_query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'",
    "Postgres_query": "SELECT COUNT(\"t2\".\"id\") FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t2\".\"season\" = '2015/2016' AND \"t1\".\"name\" = 'Scotland Premier League'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1050,
    "difficulty": "simple",
    "question": "What is the preferred foot when attacking of the youngest football player?",
    "evidence": "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;",
    "SQLite_query": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
    "Postgres_query": "SELECT \"t2\".\"preferred_foot\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" ORDER BY \"t1\".\"birthday\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1051,
    "difficulty": "simple",
    "question": "List all the football player with the highest potential score.",
    "evidence": "potential score refers to potential; highest potential score refers to MAX(potential);",
    "SQLite_query": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes) ",
    "Postgres_query": "SELECT DISTINCT(\"t1\".\"player_name\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"potential\" = (SELECT MAX(\"potential\") FROM \"Player_Attributes\")",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1052,
    "difficulty": "moderate",
    "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
    "evidence": "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';",
    "SQLite_query": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
    "Postgres_query": "SELECT COUNT(DISTINCT \"t1\".\"id\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"weight\" < 130 AND \"t2\".\"preferred_foot\" = 'left'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1053,
    "difficulty": "moderate",
    "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
    "evidence": "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;",
    "SQLite_query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"team_short_name\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"chanceCreationPassingClass\" = 'Risky'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1054,
    "difficulty": "simple",
    "question": "What is the defensive work rate of the football player David Wilson\n?",
    "evidence": "",
    "SQLite_query": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "Postgres_query": "SELECT DISTINCT \"t2\".\"defensive_work_rate\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'David Wilson'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1055,
    "difficulty": "simple",
    "question": "When is the birthday of the football player who has the highest overall rating?",
    "evidence": "football player who has the highest overall rating refers to MAX(overall_rating);",
    "SQLite_query": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"birthday\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" ORDER BY \"t2\".\"overall_rating\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1056,
    "difficulty": "simple",
    "question": "What is the name of the football league in the country of Netherlands?",
    "evidence": "name of the football league refers to League.name;",
    "SQLite_query": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "Postgres_query": "SELECT \"t2\".\"name\" FROM \"Country\" AS \"t1\" INNER JOIN \"League\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" WHERE \"t1\".\"name\" = 'Netherlands'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1057,
    "difficulty": "moderate",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "evidence": "average home team goal = AVG(home_team_goal) WHERE name = 'Poland' and season = '2010/2011';",
    "SQLite_query": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
    "Postgres_query": "SELECT CAST(SUM(\"t2\".\"home_team_goal\") AS REAL) / COUNT(\"t2\".\"id\") FROM \"Country\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" WHERE \"t1\".\"name\" = 'Poland' AND \"t2\".\"season\" = '2010/2011'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1058,
    "difficulty": "challenging",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
    "SQLite_query": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
    "Postgres_query": "SELECT \"A\" FROM ( SELECT avg(\"finishing\") AS result, 'Max' AS \"A\" FROM \"Player\" AS T1 INNER JOIN \"Player_Attributes\" AS T2 ON T1.\"player_api_id\" = T2.\"player_api_id\" WHERE T1.\"height\" = ( SELECT max(\"height\") FROM \"Player\" ) UNION SELECT avg(\"finishing\") AS result, 'Min' AS \"A\" FROM \"Player\" AS T1 INNER JOIN \"Player_Attributes\" AS T2 ON T1.\"player_api_id\" = T2.\"player_api_id\" WHERE T1.\"height\" = ( SELECT min(\"height\") FROM \"Player\" ) ) ORDER BY result DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1059,
    "difficulty": "simple",
    "question": "Please list player names which are higher than 180.",
    "evidence": "height>180;",
    "SQLite_query": "SELECT player_name FROM Player WHERE height > 180",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" WHERE \"height\" > 180",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1060,
    "difficulty": "simple",
    "question": "How many players were born after 1990?",
    "evidence": "born after 1990 refers to strftime('%Y', birthday) = '1990';",
    "SQLite_query": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"Player\" WHERE to_char(\"birthday\"::timestamp, 'YYYY') > '1990'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1061,
    "difficulty": "simple",
    "question": "How many players whose first names are Adam and weigh more than 170?",
    "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
    "SQLite_query": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"Player\" WHERE \"weight\" > 170 AND \"player_name\" ILIKE 'Adam%'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1062,
    "difficulty": "moderate",
    "question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
    "evidence": "overall_rating > 80; from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010';",
    "SQLite_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"overall_rating\" > 80 AND substring(\"t2\".\"date\", 1, 4) BETWEEN '2008' AND '2010'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1063,
    "difficulty": "simple",
    "question": "What is Aaron Doran's potential score?",
    "evidence": "potential score refers to potential;",
    "SQLite_query": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "Postgres_query": "SELECT \"t2\".\"potential\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Aaron Doran'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1064,
    "difficulty": "simple",
    "question": "List out of players whose preferred foot is left.",
    "evidence": "preferred_foot = 'left';",
    "SQLite_query": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"id\", \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"preferred_foot\" = 'left'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1065,
    "difficulty": "simple",
    "question": "Please list all team names which the speed class is fast.",
    "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
    "SQLite_query": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"team_long_name\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"buildUpPlaySpeedClass\" = 'Fast'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1066,
    "difficulty": "simple",
    "question": "What is the passing class of CLB team?",
    "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';",
    "SQLite_query": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
    "Postgres_query": "SELECT DISTINCT \"t2\".\"buildUpPlayPassingClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_short_name\" = 'CLB'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1067,
    "difficulty": "moderate",
    "question": "Which teams have build up play passing more than 70? Please list their short names.",
    "evidence": "build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;",
    "SQLite_query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"team_short_name\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"buildUpPlayPassing\" > 70",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1068,
    "difficulty": "moderate",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "evidence": "from 2010 to 2015 refers to strftime('%Y', date) BETWEEN '2010' AND '2015'; height > 170;",
    "SQLite_query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2010' AND '2015'",
    "Postgres_query": "SELECT CAST(SUM(\"t2\".\"overall_rating\") AS REAL) / COUNT(\"t2\".\"id\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"height\" > 170 AND substr(\"t2\".\"date\", 1, 4) BETWEEN '2010' AND '2015'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1069,
    "difficulty": "simple",
    "question": "Which football player has the shortest height?",
    "evidence": "shortest height refers to MIN(height);",
    "SQLite_query": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
    "Postgres_query": "SELECT \"player_name\" FROM \"player\" ORDER BY \"height\" ASC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1070,
    "difficulty": "simple",
    "question": "Which country is the league Italy Serie A from?",
    "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
    "SQLite_query": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
    "Postgres_query": "SELECT \"t1\".\"name\" FROM \"Country\" AS \"t1\" INNER JOIN \"League\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" WHERE \"t2\".\"name\" = 'Italy Serie A'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1071,
    "difficulty": "challenging",
    "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
    "evidence": "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;",
    "SQLite_query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"team_short_name\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"buildUpPlaySpeed\" = 31 AND \"t2\".\"buildUpPlayDribbling\" = 53 AND \"t2\".\"buildUpPlayPassing\" = 32",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1072,
    "difficulty": "simple",
    "question": "What is the average overall rating of the football player Aaron Doran?",
    "evidence": "average overall rating = AVG(overall_rating);",
    "SQLite_query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "Postgres_query": "SELECT CAST(SUM(\"t2\".\"overall_rating\") AS NUMERIC) / COUNT(\"t2\".\"id\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Aaron Doran'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1073,
    "difficulty": "moderate",
    "question": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?",
    "evidence": "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';",
    "SQLite_query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'",
    "Postgres_query": "SELECT COUNT(\"t2\".\"id\") FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t1\".\"name\" = 'Germany 1. Bundesliga' AND SUBSTRING(\"t2\".\"date\", 1, 7) BETWEEN '2008-08' AND '2008-10'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1074,
    "difficulty": "simple",
    "question": "List all the short name of the football team that had a home team goal of 10?",
    "evidence": "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;",
    "SQLite_query": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10",
    "Postgres_query": "SELECT \"t1\".\"team_short_name\" FROM \"Team\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"home_team_api_id\" WHERE \"t2\".\"home_team_goal\" = 10",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1075,
    "difficulty": "moderate",
    "question": "List all the football player with the highest balance score and potential score of 61.",
    "evidence": "balance score refers to balance; highest balance score refers to MAX(balance); potential score refers to potential; potential = 61;",
    "SQLite_query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"potential\" = '61' ORDER BY \"t2\".\"balance\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1076,
    "difficulty": "challenging",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'),\u00a0AVG(ball_control WHERE player_name = 'Aaron Appindangoye'));",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"t1\".\"player_name\" = 'Abdou Diallo' THEN \"t2\".\"ball_control\" ELSE 0 END) AS REAL) / COUNT(CASE WHEN \"t1\".\"player_name\" = 'Abdou Diallo' THEN \"t2\".\"id\" ELSE NULL END) - CAST(SUM(CASE WHEN \"t1\".\"player_name\" = 'Aaron Appindangoye' THEN \"t2\".\"ball_control\" ELSE 0 END) AS REAL) / COUNT(CASE WHEN \"t1\".\"player_name\" = 'Aaron Appindangoye' THEN \"t2\".\"id\" ELSE NULL END) FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\"",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1077,
    "difficulty": "simple",
    "question": "What's the long name for the team GEN?",
    "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';",
    "SQLite_query": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
    "Postgres_query": "SELECT \"team_long_name\" FROM \"Team\" WHERE \"team_short_name\" = 'GEN'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1078,
    "difficulty": "simple",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "evidence": "older player refers to older birthday;",
    "SQLite_query": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" WHERE \"player_name\" IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY \"birthday\" ASC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1079,
    "difficulty": "simple",
    "question": "Which player is the tallest?",
    "evidence": "tallest player refers to MAX(height);",
    "SQLite_query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" ORDER BY \"height\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1080,
    "difficulty": "moderate",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "evidence": "preferred foot when attacking refers to preferred foot; preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';",
    "SQLite_query": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "Postgres_query": "SELECT count(\"player_api_id\") FROM \"Player_Attributes\" WHERE \"preferred_foot\" = 'left' AND \"attacking_work_rate\" = 'low'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1081,
    "difficulty": "simple",
    "question": "Which country is the Belgium Jupiler League from?",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
    "SQLite_query": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
    "Postgres_query": "SELECT \"t1\".\"name\" FROM \"Country\" AS \"t1\" INNER JOIN \"League\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" WHERE \"t2\".\"name\" = 'Belgium Jupiler League'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1082,
    "difficulty": "simple",
    "question": "Please list the leagues from Germany.",
    "evidence": "Germany refers to Country.name = 'Germany';",
    "SQLite_query": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
    "Postgres_query": "SELECT \"t2\".\"name\" FROM \"Country\" AS \"t1\" INNER JOIN \"League\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" WHERE \"t1\".\"name\" = 'Germany'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1083,
    "difficulty": "simple",
    "question": "Which player has the strongest overall strength?",
    "evidence": "overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);",
    "SQLite_query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" ORDER BY \"t2\".\"overall_rating\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1084,
    "difficulty": "challenging",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high';",
    "SQLite_query": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986' AND t2.defensive_work_rate = 'high'",
    "Postgres_query": "SELECT COUNT(DISTINCT \"t1\".\"player_name\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE CAST(substring(\"t1\".\"birthday\", 1, 4) AS INT) < 1986 AND \"t2\".\"defensive_work_rate\" = 'high'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1085,
    "difficulty": "moderate",
    "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
    "evidence": "player who perform best in crossing actions refers to MAX(crossing);",
    "SQLite_query": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"player_name\", \"t2\".\"crossing\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY \"t2\".\"crossing\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1086,
    "difficulty": "simple",
    "question": "What's the heading accuracy of Ariel Borysiuk?",
    "evidence": "",
    "SQLite_query": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "Postgres_query": "SELECT \"t2\".\"heading_accuracy\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Ariel Borysiuk'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1087,
    "difficulty": "simple",
    "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "evidence": "height > 180; volley score refers to volleys; volleys > 70;",
    "SQLite_query": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
    "Postgres_query": "SELECT COUNT(DISTINCT \"t1\".\"id\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"height\" > 180 AND \"t2\".\"volleys\" > 70",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1088,
    "difficulty": "moderate",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "evidence": "volley score refers to volleys; volleys > 70; dribbling score refers to dribbling; dribbling > 70;",
    "SQLite_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"volleys\" > 70 AND \"t2\".\"dribbling\" > 70",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1089,
    "difficulty": "simple",
    "question": "How many matches in the 2008/2009 season were held in Belgium?",
    "evidence": "Belgium refers to Country.name = 'Belgium';",
    "SQLite_query": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'",
    "Postgres_query": "SELECT count(\"t2\".\"id\") FROM \"Country\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" WHERE \"t1\".\"name\" = 'Belgium' AND \"t2\".\"season\" = '2008/2009'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1090,
    "difficulty": "simple",
    "question": "What is the long passing score of the oldest player?",
    "evidence": "long passing score refers to long_passing; oldest player refers to oldest birthday;",
    "SQLite_query": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1",
    "Postgres_query": "SELECT \"t2\".\"long_passing\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" ORDER BY \"t1\".\"birthday\" ASC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1091,
    "difficulty": "moderate",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';\u00a0in April, 2009 refers to strftime('%Y', date) = '2009' AND strftime('%m', date) = '04';",
    "SQLite_query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 4) = '2009'",
    "Postgres_query": "SELECT COUNT(\"t2\".\"id\") FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t1\".\"name\" = 'Belgium Jupiler League' AND substr(\"t2\".\"date\", 1, 4) = '2009'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1092,
    "difficulty": "simple",
    "question": "Which league had the most matches in the 2008/2009 season?",
    "evidence": "league that had the most matches in the 2008/2009 season refers to MAX(league_id WHERE season = '2008/2009');",
    "SQLite_query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"name\" FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t2\".\"season\" = '2008/2009' GROUP BY \"t1\".\"name\" ORDER BY count(\"t2\".\"id\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1093,
    "difficulty": "moderate",
    "question": "What is the average overall rating of the players born before the year 1986?",
    "evidence": "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';",
    "SQLite_query": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'",
    "Postgres_query": "SELECT SUM(\"t2\".\"overall_rating\") / COUNT(\"t1\".\"id\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE SUBSTRING(\"t1\".\"birthday\", 1, 4) < '1986'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1094,
    "difficulty": "challenging",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
    "SQLite_query": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "Postgres_query": "SELECT ((SUM(CASE WHEN \"t1\".\"player_name\" = 'Ariel Borysiuk' THEN \"t2\".\"overall_rating\" ELSE 0 END) * 1.0 - SUM(CASE WHEN \"t1\".\"player_name\" = 'Paulin Puel' THEN \"t2\".\"overall_rating\" ELSE 0 END)) * 100) / SUM(CASE WHEN \"t1\".\"player_name\" = 'Paulin Puel' THEN \"t2\".\"overall_rating\" ELSE 0 END) FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\"",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1095,
    "difficulty": "moderate",
    "question": "How much is the average build up play speed of the Heart of Midlothian team?",
    "evidence": "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to\u00a0 AVG(buildUpPlaySpeed)",
    "SQLite_query": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'",
    "Postgres_query": "SELECT CAST(SUM(\"t2\".\"buildUpPlaySpeed\") AS NUMERIC) / COUNT(\"t2\".\"id\") FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_long_name\" = 'Heart of Midlothian'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1096,
    "difficulty": "moderate",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)",
    "SQLite_query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "Postgres_query": "SELECT CAST(SUM(\"t2\".\"overall_rating\") AS NUMERIC) / COUNT(\"t2\".\"id\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Pietro Marino'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1097,
    "difficulty": "simple",
    "question": "What is Aaron Lennox's total crossing score?",
    "evidence": "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)",
    "SQLite_query": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'",
    "Postgres_query": "SELECT SUM(\"t2\".\"crossing\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Aaron Lennox'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1098,
    "difficulty": "moderate",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified as chanceCreationPassingClass",
    "SQLite_query": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "Postgres_query": "SELECT \"t2\".\"chanceCreationPassing\", \"t2\".\"chanceCreationPassingClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_long_name\" = 'Ajax' ORDER BY \"t2\".\"chanceCreationPassing\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1099,
    "difficulty": "simple",
    "question": "Which foot is preferred by Abdou Diallo?",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "SQLite_query": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "Postgres_query": "SELECT DISTINCT \"t2\".\"preferred_foot\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Abdou Diallo'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1100,
    "difficulty": "simple",
    "question": "What is the highest overall rating received by Dorlan Pabon?",
    "evidence": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)",
    "SQLite_query": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'",
    "Postgres_query": "SELECT MAX(\"t2\".\"overall_rating\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"player_name\" = 'Dorlan Pabon'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1101,
    "difficulty": "moderate",
    "question": "What is the average number of goals made by Parma as the away team while playing in Italy?",
    "evidence": "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)",
    "SQLite_query": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
    "Postgres_query": "SELECT CAST(SUM(\"T1\".\"away_team_goal\") AS REAL) / COUNT(\"T1\".\"id\") FROM \"Match\" AS \"T1\" INNER JOIN \"TEAM\" AS \"T2\" ON \"T1\".\"away_team_api_id\" = \"T2\".\"team_api_id\" INNER JOIN \"Country\" AS \"T3\" ON \"T1\".\"country_id\" = \"T3\".\"id\" WHERE \"T2\".\"team_long_name\" = 'Parma' AND \"T3\".\"name\" = 'Italy'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1102,
    "difficulty": "moderate",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "evidence": "77 points overall rating refers to overall_rating = 77; on 2016/6/23; oldest refers to MIN(birthday)",
    "SQLite_query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE SUBSTRING(\"t2\".\"date\", 1, 10) = '2016-06-23' AND \"t2\".\"overall_rating\" = 77 ORDER BY \"t1\".\"birthday\" ASC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1103,
    "difficulty": "moderate",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date = '2016-02-04 00:00:00'",
    "SQLite_query": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "Postgres_query": "SELECT \"t2\".\"overall_rating\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE substr(\"t2\".\"date\", 1, 10) = '2016-02-04' AND \"t1\".\"player_name\" = 'Aaron Mooy'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1104,
    "difficulty": "moderate",
    "question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "SQLite_query": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "Postgres_query": "SELECT \"t2\".\"potential\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE SUBSTRING(\"t2\".\"date\", 1, 10) = '2010-08-30' AND \"t1\".\"player_name\" = 'Francesco Parravicini'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1105,
    "difficulty": "moderate",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "evidence": "Francesco Migliore's\u00a0 refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date = '2015-05-01 00:00:00'",
    "SQLite_query": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2015-05-01' AND t1.player_name = 'Francesco Migliore'",
    "Postgres_query": "SELECT \"t2\".\"attacking_work_rate\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE SUBSTRING(\"t2\".\"date\", 1, 10) = '2015-05-01' AND \"t1\".\"player_name\" = 'Francesco Migliore'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1106,
    "difficulty": "moderate",
    "question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
    "SQLite_query": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "Postgres_query": "SELECT \"t2\".\"defensive_work_rate\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_fifa_api_id\" = \"t2\".\"player_fifa_api_id\" WHERE SUBSTRING(\"t2\".\"date\", 1, 10) = '2013-02-22' AND \"t1\".\"player_name\" = 'Kevin Berigaud'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1107,
    "difficulty": "moderate",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "SQLite_query": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "Postgres_query": "SELECT \"date\" FROM ( SELECT t2.\"crossing\", t2.\"date\" FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.\"player_fifa_api_id\" = t2.\"player_fifa_api_id\" WHERE t1.\"player_name\" = 'Kevin Constant' ORDER BY t2.\"crossing\" DESC) ORDER BY \"date\" DESC LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1108,
    "difficulty": "moderate",
    "question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22 00:00:00'",
    "SQLite_query": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "Postgres_query": "SELECT \"t2\".\"buildUpPlaySpeedClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_long_name\" = 'Willem II' AND SUBSTRING(\"t2\".\"date\", 1, 10) = '2011-02-22'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1109,
    "difficulty": "moderate",
    "question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
    "evidence": "\"LEI\" refers to team_short_name = 'LEI'; on 2015/9/10 refers to\u00a0 date = '2015-09-10 00:00:00'",
    "SQLite_query": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
    "Postgres_query": "SELECT \"t2\".\"buildUpPlayDribblingClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_short_name\" = 'LEI' AND substring(\"t2\".\"date\", 1, 10) = '2015-09-10'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1110,
    "difficulty": "moderate",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "evidence": "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22\u00a0 refers to date = '2010-02-22",
    "SQLite_query": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "Postgres_query": "SELECT \"t2\".\"buildUpPlayPassingClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_long_name\" = 'FC Lorient' AND SUBSTRING(\"t2\".\"date\", 1, 10) = '2010-02-22'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1111,
    "difficulty": "moderate",
    "question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "SQLite_query": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "Postgres_query": "SELECT \"t2\".\"chanceCreationPassingClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_long_name\" = 'PEC Zwolle' AND SUBSTRING(\"t2\".\"date\", 1, 10) = '2013-09-20'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1112,
    "difficulty": "moderate",
    "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "SQLite_query": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "Postgres_query": "SELECT \"t2\".\"chanceCreationCrossingClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_long_name\" = 'Hull City' AND SUBSTRING(\"t2\".\"date\", 1, 10) = '2010-02-22'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1113,
    "difficulty": "moderate",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "evidence": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date = '2015-09-10 00:00:00'",
    "SQLite_query": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
    "Postgres_query": "SELECT \"t2\".\"chanceCreationShootingClass\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t1\".\"team_long_name\" = 'Hannover 96' AND SUBSTRING(\"t2\".\"date\", 1, 10) = '2015-09-10'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1114,
    "difficulty": "challenging",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to date BETWEEN '2007-02-22 00:00:00' and '2016-04-21 00:00:00'",
    "SQLite_query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "Postgres_query": "SELECT CAST(SUM(\"t2\".\"overall_rating\") AS NUMERIC) / COUNT(\"t2\".\"id\") FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_fifa_api_id\" = \"t2\".\"player_fifa_api_id\" WHERE \"t1\".\"player_name\" = 'Marko Arnautovic' AND SUBSTRING(\"t2\".\"date\", 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1115,
    "difficulty": "challenging",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery';\u00a0 percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
    "SQLite_query": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
    "Postgres_query": "SELECT ((SUM(CASE WHEN \"t1\".\"player_name\" = 'Landon Donovan' THEN \"t2\".\"overall_rating\" ELSE 0 END) * 1.0 - SUM(CASE WHEN \"t1\".\"player_name\" = 'Jordan Bowery' THEN \"t2\".\"overall_rating\" ELSE 0 END)) * 100 / SUM(CASE WHEN \"t1\".\"player_name\" = 'Landon Donovan' THEN \"t2\".\"overall_rating\" ELSE 0 END)) AS \"LvsJ_percent\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_fifa_api_id\" = \"t2\".\"player_fifa_api_id\" WHERE substr(\"t2\".\"date\", 1, 10) = '2013-07-12'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1116,
    "difficulty": "simple",
    "question": "List down 5 tallest players' name.",
    "evidence": "tallest refers to MAX(height)",
    "SQLite_query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" ORDER BY \"height\" DESC LIMIT 5",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1117,
    "difficulty": "simple",
    "question": "What are the player api id of 10 heaviest players?",
    "evidence": "heaviest refers to MAX(weight)",
    "SQLite_query": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
    "Postgres_query": "SELECT \"player_api_id\" FROM \"Player\" ORDER BY \"weight\" DESC NULLS LAST LIMIT 10",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1118,
    "difficulty": "simple",
    "question": "List down the name of players who are 35 years old and above.",
    "evidence": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34",
    "SQLite_query": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" WHERE CAST((date('now') - date(\"birthday\")) AS REAL) / 365 >= 35",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1119,
    "difficulty": "simple",
    "question": "How many home team goal have been scored by Aaron Lennon?",
    "evidence": "Aaron Lennon refers to player_name = 'Aaron Lennon'",
    "SQLite_query": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
    "Postgres_query": "SELECT SUM(\"t2\".\"home_team_goal\") FROM \"Player\" AS \"t1\" INNER JOIN \"match\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"away_player_9\" WHERE \"t1\".\"player_name\" = 'Aaron Lennon'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1120,
    "difficulty": "moderate",
    "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
    "evidence": "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'",
    "SQLite_query": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
    "Postgres_query": "SELECT SUM(\"t2\".\"away_team_goal\") FROM \"Player\" AS \"t1\" INNER JOIN \"match\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"away_player_5\" WHERE \"t1\".\"player_name\" IN ('Daan Smith', 'Filipe Ferreira')",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1121,
    "difficulty": "moderate",
    "question": "Calculate the total home team goal scored by players whose age are 30 years old and below.",
    "evidence": "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)",
    "SQLite_query": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31",
    "Postgres_query": "SELECT SUM(\"t2\".\"home_team_goal\") FROM \"Player\" AS \"t1\" INNER JOIN \"match\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"away_player_1\" WHERE date('now', 'localtime') - \"T1\".\"birthday\" < 31",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1122,
    "difficulty": "simple",
    "question": "State 10 names of the strongest players.",
    "evidence": "strongest players refers to MAX(overall_rating)",
    "SQLite_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 10",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" ORDER BY \"t2\".\"overall_rating\" DESC NULLS LAST LIMIT 10",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1123,
    "difficulty": "simple",
    "question": "What is the name of players with the highest potential?",
    "evidence": "highest potential refers to MAX(potential)",
    "SQLite_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" ORDER BY \"t2\".\"potential\" DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1124,
    "difficulty": "moderate",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';",
    "SQLite_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"attacking_work_rate\" = 'high'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1125,
    "difficulty": "moderate",
    "question": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.",
    "evidence": "eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday))); finishing rate of 1 refers to finishing = 1",
    "SQLite_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"finishing\" = 1 ORDER BY \"t1\".\"birthday\" ASC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1126,
    "difficulty": "simple",
    "question": "State the name of players who came from Belgium.",
    "evidence": "name of players refers to player_name; Belgium is name of country",
    "SQLite_query": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
    "Postgres_query": "SELECT \"t3\".\"player_name\" FROM \"Country\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" INNER JOIN \"Player\" AS \"t3\" ON \"t2\".\"home_player_1\" = \"t3\".\"player_api_id\" WHERE \"t1\".\"name\" = 'Belgium'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1127,
    "difficulty": "moderate",
    "question": "Locate players with vision scores of 90 and above, state the country of these players.",
    "evidence": "vision scores of 90 and above refers to vision > 89",
    "SQLite_query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
    "Postgres_query": "SELECT DISTINCT \"t4\".\"name\" FROM \"Player_Attributes\" AS \"t1\" INNER JOIN \"Player\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" INNER JOIN \"Match\" AS \"t3\" ON \"t2\".\"player_api_id\" = \"t3\".\"home_player_8\" INNER JOIN \"Country\" AS \"t4\" ON \"t3\".\"country_id\" = \"t4\".\"id\" WHERE \"t1\".\"vision\" > 89",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1128,
    "difficulty": "simple",
    "question": "Which country's players have the heaviest average weights?",
    "evidence": "heaviest average weights refers to MAX(AVG(weight))",
    "SQLite_query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"name\" FROM \"Country\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"country_id\" INNER JOIN \"Player\" AS \"t3\" ON \"t2\".\"home_player_1\" = \"t3\".\"player_api_id\" GROUP BY \"t1\".\"name\" ORDER BY AVG(\"t3\".\"weight\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1129,
    "difficulty": "simple",
    "question": "List down the long name for slow speed class team.",
    "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name",
    "SQLite_query": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"team_long_name\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"buildUpPlaySpeedClass\" = 'Slow'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1130,
    "difficulty": "moderate",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
    "SQLite_query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"team_short_name\" FROM \"Team\" AS \"t1\" INNER JOIN \"Team_Attributes\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"chanceCreationPassingClass\" = 'Safe'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1131,
    "difficulty": "simple",
    "question": "What is the average heights of Italy players?",
    "evidence": "average heights refers to Avg(height); Italy is name of country",
    "SQLite_query": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
    "Postgres_query": "SELECT CAST(SUM(\"T1\".\"height\") AS NUMERIC) / COUNT(\"T1\".\"id\") FROM \"Player\" AS \"T1\" INNER JOIN \"Match\" AS \"T2\" ON \"T1\".\"id\" = \"T2\".\"id\" INNER JOIN \"Country\" AS \"T3\" ON \"T2\".\"country_id\" = \"T3\".\"ID\" WHERE \"T3\".\"NAME\" = 'Italy'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1132,
    "difficulty": "simple",
    "question": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.",
    "evidence": "over 180 cm tall refers to height > 180; name of football player refers to player_name",
    "SQLite_query": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
    "Postgres_query": "SELECT \"player_name\" FROM \"Player\" WHERE \"height\" > 180 ORDER BY \"player_name\" NULLS LAST LIMIT 3",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1133,
    "difficulty": "simple",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
    "SQLite_query": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "Postgres_query": "SELECT COUNT(\"id\") FROM \"Player\" WHERE \"birthday\" > '1990' AND \"player_name\" LIKE 'Aaron%'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1134,
    "difficulty": "simple",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
    "SQLite_query": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "Postgres_query": "SELECT SUM(CASE WHEN \"t1\".\"id\" = 6 THEN \"t1\".\"jumping\" ELSE 0 END) - SUM(CASE WHEN \"t1\".\"id\" = 23 THEN \"t1\".\"jumping\" ELSE 0 END) FROM \"Player_Attributes\" AS \"t1\"",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1135,
    "difficulty": "moderate",
    "question": "Please provide top three football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "evidence": "lowest potential players refers to MIN(potential); prefer to use the right foot refers to preferred_foot = 'right'",
    "SQLite_query": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 3",
    "Postgres_query": "SELECT \"id\" FROM \"Player_Attributes\" WHERE \"preferred_foot\" = 'right' ORDER BY \"potential\" DESC LIMIT 3",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1136,
    "difficulty": "moderate",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "evidence": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots refers to preferred_foot = 'left'",
    "SQLite_query": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "Postgres_query": "SELECT count(\"t1\".\"id\") FROM \"Player_Attributes\" AS \"t1\" WHERE \"t1\".\"preferred_foot\" = 'left' AND \"t1\".\"crossing\" = ( SELECT max(\"crossing\") FROM \"Player_Attributes\")",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1137,
    "difficulty": "simple",
    "question": "What percentage of players have a strength and stamina score of more than 80?",
    "evidence": "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80",
    "SQLite_query": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t",
    "Postgres_query": "SELECT (CAST(COUNT(CASE WHEN \"strength\" > 80 AND \"stamina\" > 80 THEN \"id\" ELSE NULL END) AS FLOAT) * 100) / COUNT(\"id\") FROM \"Player_Attributes\" t",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1138,
    "difficulty": "simple",
    "question": "In what country did the Poland Ekstraklasa take place?",
    "evidence": "",
    "SQLite_query": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )",
    "Postgres_query": "SELECT \"name\" FROM \"Country\" WHERE \"id\" IN ( SELECT \"country_id\" FROM \"League\" WHERE \"name\" = 'Poland Ekstraklasa' )",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1139,
    "difficulty": "challenging",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "evidence": "September 24, 2008 refers to date like '2008-09-24%'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal",
    "SQLite_query": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 10) = '2008-09-24'",
    "Postgres_query": "SELECT \"t2\".\"home_team_goal\", \"t2\".\"away_team_goal\" FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t1\".\"name\" = 'Belgium Jupiler League' AND SUBSTRING(\"t2\".\"date\", 1, 10) = '2008-09-24'",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1140,
    "difficulty": "simple",
    "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
    "evidence": "Alexis Blin's refers to player_name = 'Alexis Blin'",
    "SQLite_query": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
    "Postgres_query": "SELECT \"sprint_speed\", \"agility\", \"acceleration\" FROM \"Player_Attributes\" WHERE \"player_api_id\" IN ( SELECT \"player_api_id\" FROM \"Player\" WHERE \"player_name\" = 'Alexis Blin' )",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1141,
    "difficulty": "moderate",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "SQLite_query": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"buildUpPlaySpeedClass\" FROM \"Team_Attributes\" AS \"t1\" INNER JOIN \"Team\" AS \"t2\" ON \"t1\".\"team_api_id\" = \"t2\".\"team_api_id\" WHERE \"t2\".\"team_long_name\" = 'KSV Cercle Brugge'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1142,
    "difficulty": "simple",
    "question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?",
    "evidence": "In the 2015\u20132016 season refers to season = '2015/2016'",
    "SQLite_query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
    "Postgres_query": "SELECT COUNT(\"t2\".\"id\") FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t1\".\"name\" = 'Italy Serie A' AND \"t2\".\"season\" = '2015/2016'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1143,
    "difficulty": "simple",
    "question": "What was the highest score of the home team in the Netherlands Eredivisie league?",
    "evidence": "highest score of the home team refers to MAX(home_team_goal)",
    "SQLite_query": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'",
    "Postgres_query": "SELECT MAX(\"t2\".\"home_team_goal\") FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t1\".\"name\" = 'Netherlands Eredivisie'",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1144,
    "difficulty": "simple",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "evidence": "heaviest weight refers to MAX(weight)",
    "SQLite_query": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
    "Postgres_query": "SELECT \"id\", \"finishing\", \"curve\" FROM \"Player_Attributes\" WHERE \"player_api_id\" = ( SELECT \"player_api_id\" FROM \"Player\" ORDER BY \"weight\" DESC LIMIT 1 ) LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1145,
    "difficulty": "simple",
    "question": "Which league had the most games in the 2015\u20132016 season?",
    "evidence": "in the 2015\u20132016 season season = '2015/2016'; league with most games refers to team_long_name where MAX(COUNT(id))",
    "SQLite_query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 1",
    "Postgres_query": "SELECT \"t1\".\"name\" FROM \"League\" AS \"t1\" INNER JOIN \"Match\" AS \"t2\" ON \"t1\".\"id\" = \"t2\".\"league_id\" WHERE \"t2\".\"season\" = '2015/2016' GROUP BY \"t1\".\"name\" ORDER BY count(\"t2\".\"id\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "european_football_2",
    "question_id": 1146,
    "difficulty": "moderate",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)",
    "SQLite_query": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
    "Postgres_query": "SELECT \"t2\".\"team_long_name\" FROM \"Match\" AS \"t1\" INNER JOIN \"Team\" AS \"t2\" ON \"t1\".\"away_team_api_id\" = \"t2\".\"team_api_id\" ORDER BY \"t1\".\"away_team_goal\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1147,
    "difficulty": "simple",
    "question": "Please name one player whose overall strength is the greatest.",
    "evidence": "overall strength is the greatest refers to MAX(overall_rating)",
    "SQLite_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
    "Postgres_query": "SELECT DISTINCT \"t1\".\"player_name\" FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t2\".\"overall_rating\" = ( SELECT MAX(\"overall_rating\") FROM \"Player_Attributes\")",
    "result_matched": true
  },
  {
    "db_id": "european_football_2",
    "question_id": 1148,
    "difficulty": "moderate",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100%",
    "SQLite_query": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "Postgres_query": "SELECT CAST(COUNT(CASE WHEN \"t2\".\"overall_rating\" > 70 THEN \"t1\".\"id\" ELSE NULL END) AS REAL) * 100 / COUNT(\"t1\".\"id\") AS percent FROM \"Player\" AS \"t1\" INNER JOIN \"Player_Attributes\" AS \"t2\" ON \"t1\".\"player_api_id\" = \"t2\".\"player_api_id\" WHERE \"t1\".\"height\" < 180",
    "result_matched": true
  }
]