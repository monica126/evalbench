[
  {
    "db_id": "student_club",
    "question_id": 1312,
    "difficulty": "simple",
    "question": "What's Angela Sanders's major?",
    "evidence": "major refers to major_name",
    "SQLite_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "Postgres_query": "SELECT \"T2\".\"major_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"first_name\" = 'Angela' AND \"T1\".\"last_name\" = 'Sanders'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1313,
    "difficulty": "simple",
    "question": "How many students in the Student_Club are from the College of Engineering?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"member_id\") FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T2\".\"college\" = 'College of Engineering'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1314,
    "difficulty": "simple",
    "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "evidence": "full name refers to first_name, last_name;",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T2\".\"department\" = 'Art and Design Department'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1315,
    "difficulty": "simple",
    "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
    "evidence": "Women's Soccer is an event name",
    "SQLite_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"event_id\") FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'Women''s Soccer'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1316,
    "difficulty": "moderate",
    "question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
    "evidence": "Women's Soccer is an event name; phone numbers refers to phone",
    "SQLite_query": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
    "Postgres_query": "SELECT \"T3\".\"phone\" FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"member\" AS \"T3\" ON \"T2\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T1\".\"event_name\" = 'Women''s Soccer'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1317,
    "difficulty": "moderate",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
    "SQLite_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "Postgres_query": "SELECT count(\"T1\".\"event_id\") FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"member\" AS \"T3\" ON \"T2\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T1\".\"event_name\" = 'Women''s Soccer' AND \"T3\".\"t_shirt_size\" = 'Medium'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1318,
    "difficulty": "simple",
    "question": "What is the event that has the highest attendance of the students from the Student_Club?",
    "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))",
    "SQLite_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"event_name\" FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" GROUP BY \"T1\".\"event_name\" ORDER BY count(\"T2\".\"link_to_event\") DESC NULLS LAST LIMIT 1",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1319,
    "difficulty": "simple",
    "question": "Which college is the vice president of the Student_Club from?",
    "evidence": "Vice President is a position of the Student Club",
    "SQLite_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "Postgres_query": "SELECT \"T2\".\"college\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"position\" LIKE 'vice president'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1320,
    "difficulty": "simple",
    "question": "Please list the event names of all the events attended by Maya Mclean.",
    "evidence": "",
    "SQLite_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "Postgres_query": "SELECT \"T1\".\"event_name\" FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"member\" AS \"T3\" ON \"T2\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T3\".\"first_name\" = 'Maya' AND \"T3\".\"last_name\" = 'Mclean'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1321,
    "difficulty": "moderate",
    "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
    "evidence": "events attended in 2019 refers to YEAR(event_date) = 2019",
    "SQLite_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"event_id\") FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"member\" AS \"T3\" ON \"T2\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T3\".\"first_name\" = 'Sacha' AND \"T3\".\"last_name\" = 'Harrison' AND substr(\"T1\".\"event_date\", 1, 4) = '2019'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1322,
    "difficulty": "moderate",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
    "SQLite_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.type HAVING COUNT(T2.link_to_event) > 10",
    "Postgres_query": "SELECT COUNT(\"T1\".\"event_id\") FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"type\" = 'Meeting' GROUP BY \"T1\".\"type\" HAVING COUNT(\"T2\".\"link_to_event\") > 10",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1323,
    "difficulty": "moderate",
    "question": "Please list the names of all the events of the Student_Club that had an attendance of over 20 students.",
    "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20",
    "SQLite_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20",
    "Postgres_query": "SELECT \"T1\".\"event_name\" FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" GROUP BY \"T1\".\"event_id\" HAVING COUNT(\"T2\".\"link_to_event\") > 20",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1324,
    "difficulty": "moderate",
    "question": "What is the average attendance of meetings in 2020?",
    "evidence": "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))",
    "SQLite_query": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
    "Postgres_query": "SELECT CAST(COUNT(\"T2\".\"link_to_event\") AS double precision) / COUNT(DISTINCT \"T2\".\"link_to_event\") FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE substr(\"T1\".\"event_date\", 1, 4) = '2020' AND \"T1\".\"type\" = 'Meeting'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1325,
    "difficulty": "simple",
    "question": "What is the most expensive item that was spent in support of club events?",
    "evidence": "item in support of club events refers to expense_description; most expensive refers to MAX(cost)",
    "SQLite_query": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
    "Postgres_query": "SELECT \"expense_description\" FROM \"expense\" ORDER BY \"cost\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1326,
    "difficulty": "simple",
    "question": "How many members of the Student_Club have majored Environmental Engineering?\n",
    "evidence": "'Environmental Engineering' is the major name",
    "SQLite_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"member_id\") FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T2\".\"major_name\" = 'Environmental Engineering'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1327,
    "difficulty": "moderate",
    "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" INNER JOIN \"event\" AS \"T3\" ON \"T2\".\"link_to_event\" = \"T3\".\"event_id\" WHERE \"T3\".\"event_name\" = 'Laugh Out Loud'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1328,
    "difficulty": "simple",
    "question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "evidence": "'Law and Constitutional Studies' is the major name",
    "SQLite_query": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
    "Postgres_query": "SELECT \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T2\".\"major_name\" = 'Law and Constitutional Studies'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1329,
    "difficulty": "simple",
    "question": "What county did Sherri Ramsey grew up?",
    "evidence": "",
    "SQLite_query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
    "Postgres_query": "SELECT \"T2\".\"county\" FROM member AS \"T1\" INNER JOIN zip_code AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T1\".\"first_name\" = 'Sherri' AND \"T1\".\"last_name\" = 'Ramsey'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1330,
    "difficulty": "simple",
    "question": "What college offers the major that Tyler Hewitt took?",
    "evidence": "",
    "SQLite_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
    "Postgres_query": "SELECT \"T2\".\"college\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"first_name\" = 'Tyler' AND \"T1\".\"last_name\" = 'Hewitt'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1331,
    "difficulty": "simple",
    "question": "What is the amount of the funds that the Vice President received?",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount;",
    "SQLite_query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "Postgres_query": "SELECT \"T2\".\"amount\" FROM \"member\" AS \"T1\" INNER JOIN \"income\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"position\" = 'Vice President'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1332,
    "difficulty": "moderate",
    "question": "How much did the Student_Club members spend on food in September Meeting?",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
    "SQLite_query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "Postgres_query": "SELECT \"T2\".\"spent\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'September Meeting' AND \"T2\".\"category\" = 'Food' AND substring(\"T1\".\"event_date\", 6, 2) = '09'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1333,
    "difficulty": "simple",
    "question": "What city and state did the President of the Student_Club grow up?",
    "evidence": "'President' is a position of Student Club;",
    "SQLite_query": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "Postgres_query": "SELECT \"T2\".\"city\", \"T2\".\"state\" FROM \"member\" AS \"T1\" INNER JOIN \"zip_code\" AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T1\".\"position\" = 'President'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1334,
    "difficulty": "simple",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "evidence": "full name of member refers to first_name, last_name",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"zip_code\" AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T2\".\"state\" = 'Illinois'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1335,
    "difficulty": "moderate",
    "question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "SQLite_query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "Postgres_query": "SELECT \"T2\".\"spent\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'September Meeting' AND \"T2\".\"category\" = 'Advertisement' AND substring(\"T1\".\"event_date\", 6, 2) = '09'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1336,
    "difficulty": "simple",
    "question": "What department offers the major that Pierce and Guidi took?",
    "evidence": "",
    "SQLite_query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
    "Postgres_query": "SELECT \"T2\".\"department\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"last_name\" = 'Pierce' OR \"T1\".\"last_name\" = 'Guidi'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1337,
    "difficulty": "simple",
    "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
    "evidence": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'",
    "SQLite_query": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
    "Postgres_query": "SELECT SUM(\"T2\".\"amount\") FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'October Speaker'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1338,
    "difficulty": "moderate",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "evidence": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
    "SQLite_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "Postgres_query": "SELECT \"T3\".\"approved\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" WHERE \"T1\".\"event_name\" = 'October Meeting' AND \"T1\".\"event_date\"::text LIKE '2019-10-08%'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1339,
    "difficulty": "challenging",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "evidence": "events in September and October refers to month(expense_date) = 9 AND MONTH(expense_date) = 10",
    "SQLite_query": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "Postgres_query": "SELECT AVG(\"T2\".\"cost\") FROM \"member\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"last_name\" = 'Allen' AND \"T1\".\"first_name\" = 'Elijah' AND (substring(\"T2\".\"expense_date\", 6, 2) = '09' OR substring(\"T2\".\"expense_date\", 6, 2) = '10')",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1340,
    "difficulty": "moderate",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "evidence": "SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
    "SQLite_query": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
    "Postgres_query": "SELECT SUM(CASE WHEN SUBSTR(\"T1\".\"event_date\", 1, 4) = '2019' THEN \"T2\".\"spent\" ELSE 0 END) - SUM(CASE WHEN SUBSTR(\"T1\".\"event_date\", 1, 4) = '2020' THEN \"T2\".\"spent\" ELSE 0 END) AS num FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\"",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1341,
    "difficulty": "simple",
    "question": "Give the location for \"Spring Budget Review\".",
    "evidence": "'Spring Budget Review' is an event name;",
    "SQLite_query": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "Postgres_query": "SELECT \"location\" FROM \"event\" WHERE \"event_name\" = 'Spring Budget Review'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1342,
    "difficulty": "simple",
    "question": "What was the cost for the \"Posters\" on 2019/9/4?",
    "evidence": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'",
    "SQLite_query": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
    "Postgres_query": "SELECT \"cost\" FROM \"expense\" WHERE \"expense_description\" = 'Posters' AND \"expense_date\" = '2019-09-04'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1343,
    "difficulty": "simple",
    "question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "SQLite_query": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "Postgres_query": "SELECT \"remaining\" FROM \"budget\" WHERE \"category\" = 'Food' AND \"amount\" = ( SELECT MAX(\"amount\") FROM \"budget\" WHERE \"category\" = 'Food' )",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1344,
    "difficulty": "simple",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'",
    "SQLite_query": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "Postgres_query": "SELECT \"notes\" FROM \"income\" WHERE \"source\" = 'Fundraising' AND \"date_received\" = '2019-09-14'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1345,
    "difficulty": "simple",
    "question": "How many majors are there in \"College of Humanities and Social Sciences\"?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "Postgres_query": "SELECT count(\"major_name\") FROM \"major\" WHERE \"college\" = 'College of Humanities and Social Sciences'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1346,
    "difficulty": "simple",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "evidence": "",
    "SQLite_query": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "Postgres_query": "SELECT \"phone\" FROM \"member\" WHERE \"first_name\" = 'Carlo' AND \"last_name\" = 'Jacobs'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1347,
    "difficulty": "simple",
    "question": "Tell the hometown county for \"Adela O'Gallagher\".",
    "evidence": "hometown county refers to county",
    "SQLite_query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
    "Postgres_query": "SELECT \"T2\".\"county\" FROM member AS \"T1\" INNER JOIN zip_code AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T1\".\"first_name\" = 'Adela' AND \"T1\".\"last_name\" = 'O''Gallagher'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1348,
    "difficulty": "simple",
    "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
    "evidence": "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget",
    "SQLite_query": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
    "Postgres_query": "SELECT COUNT(\"T2\".\"event_id\") FROM \"budget\" AS \"T1\" INNER JOIN \"event\" AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" WHERE \"T2\".\"event_name\" = 'November Meeting' AND \"T1\".\"remaining\" < 0",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1349,
    "difficulty": "simple",
    "question": "Provide the total number of the budget amount for \"September Speaker\" event.",
    "evidence": "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)",
    "SQLite_query": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
    "Postgres_query": "SELECT SUM(\"T1\".\"amount\") FROM \"budget\" AS \"T1\" INNER JOIN \"event\" AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" WHERE \"T2\".\"event_name\" = 'September Speaker'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1350,
    "difficulty": "moderate",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "evidence": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status",
    "SQLite_query": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
    "Postgres_query": "SELECT \"T1\".\"event_status\" FROM budget AS \"T1\" INNER JOIN expense AS \"T2\" ON \"T1\".\"budget_id\" = \"T2\".\"link_to_budget\" WHERE \"T2\".\"expense_description\" = 'Post Cards, Posters' AND \"T2\".\"expense_date\" = '2019-08-20'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1351,
    "difficulty": "simple",
    "question": "What was Brent Thomason's major?",
    "evidence": "major refers to major_name",
    "SQLite_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "Postgres_query": "SELECT \"T2\".\"major_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"first_name\" = 'Brent' AND \"T1\".\"last_name\" = 'Thomason'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1352,
    "difficulty": "moderate",
    "question": "For all the club members from \"Human Development and Family Studies\" major, how many of them wear large size t-shirt?",
    "evidence": "'Human Development and Family Studies' is a major name; wear large size t-shirt refers to t_shirt_size = 'Large'",
    "SQLite_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development AND Family Studies' AND T1.t_shirt_size = 'Large'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"member_id\") FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T2\".\"major_name\" = 'Human Development AND Family Studies' AND \"T1\".\"t_shirt_size\" = 'Large'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1353,
    "difficulty": "simple",
    "question": "What's Christof Nielson's zip code type?",
    "evidence": "",
    "SQLite_query": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
    "Postgres_query": "SELECT \"T2\".\"type\" FROM member AS \"T1\" INNER JOIN zip_code AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T1\".\"first_name\" = 'Christof' AND \"T1\".\"last_name\" = 'Nielson'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1354,
    "difficulty": "simple",
    "question": "State the major name for the Vice President of the club.",
    "evidence": "'Vice President' is a position of Student Club",
    "SQLite_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "Postgres_query": "SELECT \"T2\".\"major_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"position\" = 'Vice President'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1355,
    "difficulty": "simple",
    "question": "Where is the hometown state for \"Sacha Harrison\"?",
    "evidence": "hometown state refers to state;",
    "SQLite_query": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "Postgres_query": "SELECT \"T2\".\"state\" FROM member AS \"T1\" INNER JOIN zip_code AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T1\".\"first_name\" = 'Sacha' AND \"T1\".\"last_name\" = 'Harrison'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1356,
    "difficulty": "simple",
    "question": "Which department was the President of the club in?",
    "evidence": "'President' is a position of Student Club",
    "SQLite_query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "Postgres_query": "SELECT \"T2\".\"department\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"position\" = 'President'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1357,
    "difficulty": "simple",
    "question": "State the date Connor Hilton paid his/her dues.",
    "evidence": "date the dues was paid refers to received_date where source = 'Dues'",
    "SQLite_query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "Postgres_query": "SELECT \"T2\".\"date_received\" FROM \"member\" AS \"T1\" INNER JOIN \"income\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"first_name\" = 'Connor' AND \"T1\".\"last_name\" = 'Hilton' AND \"T2\".\"source\" = 'Dues'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1358,
    "difficulty": "simple",
    "question": "Who was the first one paid his/her dues? Tell the full name.",
    "evidence": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"income\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T2\".\"source\" = 'Dues' ORDER BY \"T2\".\"date_received\" NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1359,
    "difficulty": "challenging",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "evidence": "DIVIDE(SUM(amount where category = 'Advertisement' and event_name = 'Yearly Kickoff'), SUM(amount event_name = 'October Meeting' and category = 'Advertisement'))",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T2\".\"event_name\" = 'Yearly Kickoff' THEN \"T1\".\"amount\" ELSE 0 END) AS numeric) / SUM(CASE WHEN \"T2\".\"event_name\" = 'October Meeting' THEN \"T1\".\"amount\" ELSE 0 END) FROM budget AS \"T1\" INNER JOIN event AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" WHERE \"T1\".\"category\" = 'Advertisement' AND \"T2\".\"type\" = 'Meeting'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1360,
    "difficulty": "moderate",
    "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
    "evidence": "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T1\".\"category\" = 'Parking' THEN \"T1\".\"amount\" ELSE 0 END) AS REAL) * 100 / SUM(\"T1\".\"amount\") FROM budget AS \"T1\" INNER JOIN event AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" WHERE \"T2\".\"event_name\" = 'November Speaker'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1361,
    "difficulty": "simple",
    "question": "What is the total cost of the pizzas for all the events?",
    "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'",
    "SQLite_query": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "Postgres_query": "SELECT SUM(\"cost\") FROM \"expense\" WHERE \"expense_description\" = 'Pizza'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1362,
    "difficulty": "simple",
    "question": "How many cities are there in Orange County, Virginia?",
    "evidence": "Orange County is the county, Virginia is the state",
    "SQLite_query": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "Postgres_query": "SELECT COUNT(\"city\") FROM \"zip_code\" WHERE \"county\" = 'Orange County' AND \"state\" = 'Virginia'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1363,
    "difficulty": "simple",
    "question": "List all of the College of Humanities and Social Sciences' departments.",
    "evidence": "",
    "SQLite_query": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "Postgres_query": "SELECT \"department\" FROM \"major\" WHERE \"college\" = 'College of Humanities and Social Sciences'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1364,
    "difficulty": "simple",
    "question": "Where is Amy Firth's hometown?",
    "evidence": "hometown refers to city, county, state",
    "SQLite_query": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
    "Postgres_query": "SELECT \"T2\".\"city\", \"T2\".\"county\", \"T2\".\"state\" FROM member AS \"T1\" INNER JOIN zip_code AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T1\".\"first_name\" = 'Amy' AND \"T1\".\"last_name\" = 'Firth'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1365,
    "difficulty": "simple",
    "question": "What are the expenses of the budget with the lowest remaining?",
    "evidence": "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)",
    "SQLite_query": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"expense_description\" FROM \"budget\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"budget_id\" = \"T2\".\"link_to_budget\" ORDER BY \"T1\".\"remaining\" NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1366,
    "difficulty": "simple",
    "question": "List all the members who attended the event \"October Meeting\".",
    "evidence": "'October Meeting' is an event name;",
    "SQLite_query": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "Postgres_query": "SELECT DISTINCT \"T3\".\"member_id\" FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"member\" AS \"T3\" ON \"T2\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T1\".\"event_name\" = 'October Meeting'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1367,
    "difficulty": "simple",
    "question": "Which college do most of the members go to?",
    "evidence": "college most members go refers to MAX(COUNT(major.college))",
    "SQLite_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"college\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" GROUP BY \"T2\".\"major_id\" ORDER BY count(\"T2\".\"college\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1368,
    "difficulty": "simple",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "evidence": "major in refers to major_name",
    "SQLite_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "Postgres_query": "SELECT \"T2\".\"major_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T1\".\"phone\" = '809-555-3360'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1369,
    "difficulty": "simple",
    "question": "Which event has the highest budget amount?",
    "evidence": "event refers to event_name; highest budget amount refers to MAX(amount)",
    "SQLite_query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"event_name\" FROM budget AS \"T1\" INNER JOIN event AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" ORDER BY \"T1\".\"amount\" DESC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1370,
    "difficulty": "simple",
    "question": "List all the expenses incurred by the vice president.",
    "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
    "SQLite_query": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "Postgres_query": "SELECT \"T2\".\"expense_id\", \"T2\".\"expense_description\" FROM \"member\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"position\" = 'Vice President'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1371,
    "difficulty": "simple",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "evidence": "'Women's Soccer' is the event name;",
    "SQLite_query": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"link_to_member\") FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'Women''s Soccer'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1372,
    "difficulty": "simple",
    "question": "When did the member, Casey Mason, received the income?",
    "evidence": "when the income was received refers to date_received",
    "SQLite_query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'",
    "Postgres_query": "SELECT \"T2\".\"date_received\" FROM \"member\" AS \"T1\" INNER JOIN \"income\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"first_name\" = 'Casey' AND \"T1\".\"last_name\" = 'Mason'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1373,
    "difficulty": "simple",
    "question": "How many of the members' hometowns are from Maryland state?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"member_id\") FROM \"zip_code\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"zip_code\" = \"T2\".\"zip\" WHERE \"T1\".\"state\" = 'Maryland'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1374,
    "difficulty": "simple",
    "question": "How many events did the member with the phone number \"954-555-6240\" attend?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"link_to_event\") FROM \"member\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"phone\" = '954-555-6240'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1375,
    "difficulty": "moderate",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T1\".\"link_to_major\" = \"T2\".\"major_id\" WHERE \"T2\".\"department\" = 'School of Applied Sciences, Technology and Education'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1376,
    "difficulty": "moderate",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
    "SQLite_query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"event_name\" FROM \"budget\" AS \"T1\" INNER JOIN \"event\" AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" WHERE \"T2\".\"status\" = 'Closed' ORDER BY \"T1\".\"spent\" / \"T1\".\"amount\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1377,
    "difficulty": "simple",
    "question": "How many student have the position of president?",
    "evidence": "'President' is a position of Student Club",
    "SQLite_query": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
    "Postgres_query": "SELECT COUNT(\"member_id\") FROM \"member\" WHERE \"position\" = 'President'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1378,
    "difficulty": "simple",
    "question": "What is the highest amount of budget spend for an event?",
    "evidence": "highest amount of budget spend refers to MAX(spent)",
    "SQLite_query": "SELECT MAX(spent) FROM budget",
    "Postgres_query": "SELECT MAX(\"spent\") FROM \"budget\"",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1379,
    "difficulty": "simple",
    "question": "How many meeting events were held in 2020?",
    "evidence": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020",
    "SQLite_query": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
    "Postgres_query": "SELECT count(\"event_id\") FROM \"event\" WHERE \"type\" = 'Meeting' AND substring(\"event_date\", 1, 4) = '2020'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1380,
    "difficulty": "simple",
    "question": "What is the total amount of money spent for food?",
    "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
    "SQLite_query": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "Postgres_query": "SELECT SUM(\"spent\") FROM \"budget\" WHERE \"category\" = 'Food'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1381,
    "difficulty": "moderate",
    "question": "List the name of students that have attended more than 7 events.",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" GROUP BY \"T2\".\"link_to_member\" HAVING COUNT(\"T2\".\"link_to_event\") > 7",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1382,
    "difficulty": "moderate",
    "question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "SQLite_query": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "Postgres_query": "SELECT \"T2\".\"first_name\", \"T2\".\"last_name\" FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" INNER JOIN \"attendance\" AS \"T3\" ON \"T2\".\"member_id\" = \"T3\".\"link_to_member\" INNER JOIN \"event\" AS \"T4\" ON \"T3\".\"link_to_event\" = \"T4\".\"event_id\" WHERE \"T4\".\"event_name\" = 'Community Theater' AND \"T1\".\"major_name\" = 'Interior Design'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1383,
    "difficulty": "simple",
    "question": "State the name of students from Georgetown, South Carolina.",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"zip_code\" AS \"T2\" ON \"T1\".\"zip\" = \"T2\".\"zip_code\" WHERE \"T2\".\"city\" = 'Georgetown' AND \"T2\".\"state\" = 'South Carolina'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1384,
    "difficulty": "simple",
    "question": "How many income generated by Grant Gilmour?",
    "evidence": "income generated refers to income.amount",
    "SQLite_query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'",
    "Postgres_query": "SELECT \"T2\".\"amount\" FROM \"member\" AS \"T1\" INNER JOIN \"income\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"first_name\" = 'Grant' AND \"T1\".\"last_name\" = 'Gilmour'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1385,
    "difficulty": "simple",
    "question": "Which student was able to generate income more than $40?",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40",
    "SQLite_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\" FROM \"member\" AS \"T1\" INNER JOIN \"income\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T2\".\"amount\" > 40",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1386,
    "difficulty": "simple",
    "question": "What is the total expense for the Yearly Kickoff?",
    "evidence": "'Baseball game' is an event name; total expense refers to SUM(cost)",
    "SQLite_query": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
    "Postgres_query": "SELECT SUM(\"T3\".\"cost\") FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" WHERE \"T1\".\"event_name\" = 'Yearly Kickoff'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1387,
    "difficulty": "moderate",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "evidence": "'Yearly Kickoff' is an event name;",
    "SQLite_query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "Postgres_query": "SELECT \"T4\".\"first_name\", \"T4\".\"last_name\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" INNER JOIN \"member\" AS \"T4\" ON \"T3\".\"link_to_member\" = \"T4\".\"member_id\" WHERE \"T1\".\"event_name\" = 'Yearly Kickoff'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1388,
    "difficulty": "moderate",
    "question": "Which students manage to generate the highest income. State his/her full name along with the income source.",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);",
    "SQLite_query": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\", \"T2\".\"source\" FROM member AS \"T1\" INNER JOIN income AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" GROUP BY \"T1\".\"first_name\", \"T1\".\"last_name\", \"T2\".\"source\" ORDER BY SUM(\"T2\".\"amount\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1389,
    "difficulty": "simple",
    "question": "Which event has the lowest cost?",
    "evidence": "event refers to event_name where MIN(cost)",
    "SQLite_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
    "Postgres_query": "SELECT \"T1\".\"event_name\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" ORDER BY \"T3\".\"cost\" NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1390,
    "difficulty": "moderate",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "evidence": "DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T1\".\"event_name\" = 'Yearly Kickoff' THEN \"T3\".\"cost\" ELSE 0 END) AS REAL) * 100 / SUM(\"T3\".\"cost\") FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\"",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1391,
    "difficulty": "simple",
    "question": "What is the ratio between students majored in finance and physics?",
    "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))",
    "SQLite_query": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
    "Postgres_query": "SELECT SUM(CASE WHEN \"major_name\" = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN \"major_name\" = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1392,
    "difficulty": "simple",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "evidence": "top source funds refers to MAX(source) where date_received BETWEEN '2019-09-01' and '2019-09-30'",
    "SQLite_query": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
    "Postgres_query": "SELECT \"source\" FROM income WHERE \"date_received\" BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY \"source\" DESC LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1393,
    "difficulty": "simple",
    "question": "Provide the full name and email address of the Student_Club's Secretary.",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "SQLite_query": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "Postgres_query": "SELECT \"first_name\", \"last_name\", \"email\" FROM \"member\" WHERE \"position\" = 'Secretary'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1394,
    "difficulty": "simple",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "evidence": "'Physics Teaching' is the major name;",
    "SQLite_query": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"member_id\") FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" WHERE \"T1\".\"major_name\" = 'Physics Teaching'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1395,
    "difficulty": "moderate",
    "question": "How many members did attend the event 'Community Theater' in 2019?",
    "evidence": "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019",
    "SQLite_query": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"link_to_member\") FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'Community Theater' AND substr(\"T1\".\"event_date\", 1, 4) = '2019'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1396,
    "difficulty": "simple",
    "question": "Provide the number of events attended by Luisa Guidi. What is her major?",
    "evidence": "major refers to major_name;",
    "SQLite_query": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
    "Postgres_query": "SELECT COUNT(\"T3\".\"link_to_event\"), \"T1\".\"major_name\" FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" INNER JOIN \"attendance\" AS \"T3\" ON \"T2\".\"member_id\" = \"T3\".\"link_to_member\" WHERE \"T2\".\"first_name\" = 'Luisa' AND \"T2\".\"last_name\" = 'Guidi'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1397,
    "difficulty": "simple",
    "question": "On average, how much did the Student_Club spend on food for the typical event in the past?",
    "evidence": "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'",
    "SQLite_query": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
    "Postgres_query": "SELECT SUM(\"spent\") / COUNT(\"spent\") FROM \"budget\" WHERE \"category\" = 'Food' AND \"event_status\" = 'Closed'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1398,
    "difficulty": "moderate",
    "question": "Name the event with the highest amount spent on advertisement.",
    "evidence": "event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "SQLite_query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"event_name\" FROM budget AS \"T1\" INNER JOIN event AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" WHERE \"T1\".\"category\" = 'Advertisement' ORDER BY \"T1\".\"spent\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1399,
    "difficulty": "moderate",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "evidence": "'Women's Soccer' is an event name",
    "SQLite_query": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "Postgres_query": "SELECT CASE WHEN \"T3\".\"event_name\" = 'Women''s Soccer' THEN 'YES' END AS \"result\" FROM \"member\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" INNER JOIN \"event\" AS \"T3\" ON \"T2\".\"link_to_event\" = \"T3\".\"event_id\" WHERE \"T1\".\"first_name\" = 'Maya' AND \"T1\".\"last_name\" = 'Mclean'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1400,
    "difficulty": "moderate",
    "question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
    "evidence": "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"type\" = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"type\") FROM event WHERE SUBSTRING(\"event_date\", 1, 4) = '2019'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1401,
    "difficulty": "moderate",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "SQLite_query": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "Postgres_query": "SELECT \"T3\".\"cost\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" WHERE \"T1\".\"event_name\" = 'September Speaker' AND \"T3\".\"expense_description\" = 'Posters'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1402,
    "difficulty": "simple",
    "question": "What is the most popular size of t-shirt ordered by the club members?",
    "evidence": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))",
    "SQLite_query": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
    "Postgres_query": "SELECT \"t_shirt_size\" FROM \"member\" GROUP BY \"t_shirt_size\" ORDER BY count(\"t_shirt_size\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1403,
    "difficulty": "moderate",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "evidence": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0",
    "SQLite_query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"event_name\" FROM budget AS \"T1\" INNER JOIN event AS \"T2\" ON \"T2\".\"event_id\" = \"T1\".\"link_to_event\" WHERE \"T1\".\"event_status\" = 'Closed' AND \"T1\".\"remaining\" < 0 ORDER BY \"T1\".\"remaining\" NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1404,
    "difficulty": "moderate",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
    "SQLite_query": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
    "Postgres_query": "SELECT \"T1\".\"type\", SUM(\"T3\".\"cost\") FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" WHERE \"T1\".\"event_name\" = 'October Meeting'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1405,
    "difficulty": "moderate",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount.",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to budget; budget categories refers to category",
    "SQLite_query": "SELECT SUM(T2.amount), T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' ORDER BY T2.amount",
    "Postgres_query": "SELECT SUM(\"T2\".\"amount\"), \"T2\".\"category\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'April Speaker' ORDER BY \"T2\".\"amount\" NULLS LAST",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1406,
    "difficulty": "simple",
    "question": "Among the budgets for Food, which one has the highest budgeted amount?",
    "evidence": "MAX(amount) where category = 'Food'",
    "SQLite_query": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )",
    "Postgres_query": "SELECT \"budget_id\" FROM \"budget\" WHERE \"category\" = 'Food' AND \"amount\" = ( SELECT MAX(\"amount\") FROM \"budget\" )",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1407,
    "difficulty": "simple",
    "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
    "evidence": "MAX(amount) where category = 'Advertisement'",
    "SQLite_query": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
    "Postgres_query": "SELECT \"budget_id\" FROM \"budget\" WHERE \"category\" = 'Advertisement' ORDER BY \"amount\" DESC LIMIT 3",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1408,
    "difficulty": "simple",
    "question": "Calculate the total cost spent for Parking in the list.",
    "evidence": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'",
    "SQLite_query": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
    "Postgres_query": "SELECT SUM(\"cost\") FROM \"expense\" WHERE \"expense_description\" = 'Parking'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1409,
    "difficulty": "simple",
    "question": "Mention the total expense used on 8/20/2019.",
    "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'",
    "SQLite_query": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "Postgres_query": "SELECT SUM(\"cost\") FROM \"expense\" WHERE \"expense_date\" = '2019-08-20'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1410,
    "difficulty": "simple",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "evidence": "full name refers to first_name, last name",
    "SQLite_query": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\", SUM(\"T2\".\"cost\") FROM \"member\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"member_id\" = 'rec4BLdZHS2Blfp4v'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1411,
    "difficulty": "simple",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "evidence": "kind of expenses refers to expense_description",
    "SQLite_query": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "Postgres_query": "SELECT \"T2\".\"expense_description\" FROM \"member\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"first_name\" = 'Sacha' AND \"T1\".\"last_name\" = 'Harrison'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1412,
    "difficulty": "simple",
    "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
    "SQLite_query": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "Postgres_query": "SELECT \"T2\".\"expense_description\" FROM \"member\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"t_shirt_size\" = 'X-Large'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1413,
    "difficulty": "simple",
    "question": "Mention the zip code of member who incurred less than 50USD.",
    "evidence": "incurred less than 50USD refers to cost < 50",
    "SQLite_query": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50",
    "Postgres_query": "SELECT \"T1\".\"zip\" FROM \"member\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T2\".\"cost\" < 50",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1414,
    "difficulty": "simple",
    "question": "State the name of major that Phillip Cullen has joined.",
    "evidence": "name of major refers to major_name",
    "SQLite_query": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
    "Postgres_query": "SELECT \"T1\".\"major_name\" FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" WHERE \"T2\".\"first_name\" = 'Phillip' AND \"T2\".\"last_name\" = 'Cullen'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1415,
    "difficulty": "simple",
    "question": "List out the position of members who joined major of Business.",
    "evidence": "'Business' is the major name",
    "SQLite_query": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "Postgres_query": "SELECT \"T2\".\"position\" FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" WHERE \"T1\".\"major_name\" = 'Business'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1416,
    "difficulty": "simple",
    "question": "How many members of Business have the Medium size of tee shirt?",
    "evidence": "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'",
    "SQLite_query": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'",
    "Postgres_query": "SELECT COUNT(\"T2\".\"member_id\") FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" WHERE \"T1\".\"major_name\" = 'Business' AND \"T2\".\"t_shirt_size\" = 'Medium'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1417,
    "difficulty": "simple",
    "question": "List out the type of events which have remaining budget more than 30 USD.",
    "evidence": "remaining budget more than 30 USD refers to remaining > 30",
    "SQLite_query": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30",
    "Postgres_query": "SELECT \"T1\".\"type\" FROM event AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T2\".\"remaining\" > 30",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1418,
    "difficulty": "simple",
    "question": "Mention the category of events which were held at MU 215.",
    "evidence": "held at MU 215 refers to location = 'MU 215'",
    "SQLite_query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "Postgres_query": "SELECT \"T2\".\"category\" FROM event AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"location\" = 'MU 215'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1419,
    "difficulty": "simple",
    "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "evidence": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'",
    "SQLite_query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
    "Postgres_query": "SELECT \"T2\".\"category\" FROM event AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_date\" = '2020-03-24T12:00:00'::timestamp",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1420,
    "difficulty": "simple",
    "question": "State the name of major that Vice President has joined.",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "SQLite_query": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "Postgres_query": "SELECT \"T1\".\"major_name\" FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" WHERE \"T2\".\"position\" = 'Vice President'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1421,
    "difficulty": "moderate",
    "question": "Calculate the percentage of members who are major Mathematics in the list?",
    "evidence": "DIVIDE(SUM(position = 'Member' and major_name = 'Mathematics'), COUNT(member_id)) * 100",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T2\".\"major_name\" = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"T1\".\"member_id\") FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" WHERE \"T1\".\"position\" = 'Member'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1422,
    "difficulty": "simple",
    "question": "State the category of events were held at MU 215.",
    "evidence": "'MU 215' is the location of event",
    "SQLite_query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "Postgres_query": "SELECT \"T2\".\"category\" FROM event AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"location\" = 'MU 215'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1423,
    "difficulty": "simple",
    "question": "How many income are received with an amount of 50?",
    "evidence": "amount of 50 refers to amount = 50",
    "SQLite_query": "SELECT COUNT(income_id) FROM income WHERE amount = 50",
    "Postgres_query": "SELECT COUNT(\"income_id\") FROM \"income\" WHERE \"amount\" = 50",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1424,
    "difficulty": "simple",
    "question": "Among the members, how many of them have an extra large t-shirt size?",
    "evidence": "among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'",
    "SQLite_query": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
    "Postgres_query": "SELECT count(\"member_id\") FROM \"member\" WHERE \"position\" = 'Member' AND \"t_shirt_size\" = 'X-Large'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1425,
    "difficulty": "simple",
    "question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?",
    "evidence": "",
    "SQLite_query": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology AND Education' AND college = 'College of Agriculture AND Applied Sciences'",
    "Postgres_query": "SELECT count(\"major_id\") FROM \"major\" WHERE \"department\" = 'School of Applied Sciences, Technology AND Education' AND \"college\" = 'College of Agriculture AND Applied Sciences'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1426,
    "difficulty": "moderate",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "evidence": "'Environmental Engineering' is the major name;",
    "SQLite_query": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "Postgres_query": "SELECT \"T2\".\"last_name\", \"T1\".\"department\", \"T1\".\"college\" FROM \"major\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"major_id\" = \"T2\".\"link_to_major\" WHERE \"T2\".\"position\" = 'Member' AND \"T1\".\"major_name\" = 'Environmental Engineering'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1427,
    "difficulty": "moderate",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0",
    "SQLite_query": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"category\", \"T1\".\"type\" FROM event AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"location\" = 'MU 215' AND \"T2\".\"spent\" = 0 AND \"T1\".\"type\" = 'Guest Speaker'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1428,
    "difficulty": "moderate",
    "question": "List the city and state of members enrolled under electrical and computer engineering department.",
    "evidence": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'",
    "SQLite_query": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
    "Postgres_query": "SELECT \"city\", \"state\" FROM \"member\" AS T1 INNER JOIN \"major\" AS T2 ON T2.\"major_id\" = T1.\"link_to_major\" INNER JOIN \"zip_code\" AS T3 ON T3.\"zip_code\" = T1.\"zip\" WHERE \"department\" = 'Electrical and Computer Engineering Department' AND \"position\" = 'Member'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1429,
    "difficulty": "challenging",
    "question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
    "SQLite_query": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "Postgres_query": "SELECT \"T2\".\"event_name\" FROM attendance AS \"T1\" INNER JOIN event AS \"T2\" ON \"T2\".\"event_id\" = \"T1\".\"link_to_event\" INNER JOIN member AS \"T3\" ON \"T1\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T3\".\"position\" = 'Vice President' AND \"T2\".\"location\" = '900 E. Washington St.' AND \"T2\".\"type\" = 'Social'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1430,
    "difficulty": "moderate",
    "question": "What is the last name and position of the student that bought pizza on 09/10/2019?",
    "evidence": "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'",
    "SQLite_query": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
    "Postgres_query": "SELECT \"T1\".\"last_name\", \"T1\".\"position\" FROM member AS \"T1\" INNER JOIN expense AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T2\".\"expense_date\" = '2019-09-10' AND \"T2\".\"expense_description\" = 'Pizza'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1431,
    "difficulty": "moderate",
    "question": "List the last name of the members of the club that attended the women's soccer event.",
    "evidence": "members of the club refers to position = 'Member'; 'Women's Soccer' is event name;",
    "SQLite_query": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'",
    "Postgres_query": "SELECT \"T3\".\"last_name\" FROM attendance AS \"T1\" INNER JOIN event AS \"T2\" ON \"T2\".\"event_id\" = \"T1\".\"link_to_event\" INNER JOIN member AS \"T3\" ON \"T1\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T2\".\"event_name\" = 'Women''s Soccer' AND \"T3\".\"position\" = 'Member'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1432,
    "difficulty": "moderate",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "evidence": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"T2\".\"amount\" = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(\"T2\".\"income_id\") FROM \"member\" AS \"T1\" INNER JOIN \"income\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE \"T1\".\"position\" = 'Member' AND \"T1\".\"t_shirt_size\" = 'Medium'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1433,
    "difficulty": "simple",
    "question": "Which countries have zip codes with post office boxes?",
    "evidence": "zip codes that have post office boxes refers to type = 'PO Box'",
    "SQLite_query": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
    "Postgres_query": "SELECT DISTINCT \"county\" FROM \"zip_code\" WHERE \"type\" = 'PO Box' AND \"county\" IS NOT NULL",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1434,
    "difficulty": "simple",
    "question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?",
    "evidence": "zip codes that have post office boxes refers to type = 'PO Box'",
    "SQLite_query": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
    "Postgres_query": "SELECT \"zip_code\" FROM \"zip_code\" WHERE \"type\" = 'PO Box' AND \"county\" = 'San Juan Municipio' AND \"state\" = 'Puerto Rico'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1435,
    "difficulty": "moderate",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'",
    "SQLite_query": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "Postgres_query": "SELECT DISTINCT \"event_name\" FROM \"event\" WHERE \"type\" = 'Game' AND SUBSTRING(\"event_date\", 1, 10)::date BETWEEN '2019-03-15' AND '2020-03-20' AND \"status\" = 'Closed'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1436,
    "difficulty": "simple",
    "question": "Please provide links to events for members who have paid more than 50 dollar.",
    "evidence": "have paid more than 50 dollar refers to cost > 50",
    "SQLite_query": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
    "Postgres_query": "SELECT DISTINCT \"T3\".\"link_to_event\" FROM \"expense\" AS \"T1\" INNER JOIN \"member\" AS \"T2\" ON \"T1\".\"link_to_member\" = \"T2\".\"member_id\" INNER JOIN \"attendance\" AS \"T3\" ON \"T2\".\"member_id\" = \"T3\".\"link_to_member\" WHERE \"T1\".\"cost\" > 50",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1437,
    "difficulty": "challenging",
    "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
    "evidence": "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'",
    "SQLite_query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"link_to_member\", \"T3\".\"link_to_event\" FROM expense AS \"T1\" INNER JOIN member AS \"T2\" ON \"T1\".\"link_to_member\" = \"T2\".\"member_id\" INNER JOIN attendance AS \"T3\" ON \"T2\".\"member_id\" = \"T3\".\"link_to_member\" WHERE date(SUBSTRING(\"T1\".\"expense_date\", 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND \"T1\".\"approved\" = 1",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1438,
    "difficulty": "simple",
    "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
    "evidence": "",
    "SQLite_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
    "Postgres_query": "SELECT \"T2\".\"college\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" WHERE \"T1\".\"link_to_major\" = 'rec1N0upiVLy5esTO' AND \"T1\".\"first_name\" = 'Katy'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1439,
    "difficulty": "moderate",
    "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
    "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
    "SQLite_query": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "Postgres_query": "SELECT \"T1\".\"phone\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" WHERE \"T2\".\"major_name\" = 'Business' AND \"T2\".\"college\" = 'College of Agriculture and Applied Sciences'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1440,
    "difficulty": "moderate",
    "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
    "evidence": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20",
    "SQLite_query": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"email\" FROM \"member\" AS \"T1\" INNER JOIN \"expense\" AS \"T2\" ON \"T1\".\"member_id\" = \"T2\".\"link_to_member\" WHERE date(substring(\"T2\".\"expense_date\", 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND \"T2\".\"cost\" > 20",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1441,
    "difficulty": "moderate",
    "question": "How many members have education major in the College of Education & Human Services?",
    "evidence": "'education' is the major name; 'Member' is a position of club;",
    "SQLite_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
    "Postgres_query": "SELECT COUNT(\"T1\".\"member_id\") FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" WHERE \"T1\".\"position\" = 'Member' AND \"T2\".\"major_name\" ILIKE '%Education%' AND \"T2\".\"college\" = 'College of Education & Human Services'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1442,
    "difficulty": "simple",
    "question": "What is the percentage of the events that went over budget?",
    "evidence": "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"remaining\" < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"budget_id\") FROM \"budget\"",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1443,
    "difficulty": "simple",
    "question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.",
    "evidence": "event_date BETWEEN '2019-11-01' and '2020-03-31'",
    "SQLite_query": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'",
    "Postgres_query": "SELECT \"event_id\", \"location\", \"status\" FROM \"event\" WHERE to_char(\"event_date\"::timestamp, 'YYYY-MM-DD') BETWEEN '2019-11-01' AND '2020-03-31'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1444,
    "difficulty": "simple",
    "question": "List the expenses that spend more than fifty dollars on average.",
    "evidence": "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50",
    "SQLite_query": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
    "Postgres_query": "SELECT \"expense_description\" FROM \"expense\" GROUP BY \"expense_description\" HAVING AVG(\"cost\") > 50",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1445,
    "difficulty": "simple",
    "question": "Find the full name of members whose t-shirt size is extra large.",
    "evidence": "full name refers to first_name, last_name; t_shirt_size = 'X-Large'",
    "SQLite_query": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
    "Postgres_query": "SELECT \"first_name\", \"last_name\" FROM \"member\" WHERE \"t_shirt_size\" = 'X-Large'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1446,
    "difficulty": "simple",
    "question": "Calculate the percentage of zip codes that are PO boxes.",
    "evidence": "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100",
    "SQLite_query": "SELECT CAST(SUM(CASE WHEN type = 'PO box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
    "Postgres_query": "SELECT CAST(SUM(CASE WHEN \"type\" = 'PO box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"zip_code\") FROM \"zip_code\"",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1447,
    "difficulty": "simple",
    "question": "List the name and location of events that underspend its budget.",
    "evidence": "name of event refers to event_name; underspend its budget refers to remaining > 0",
    "SQLite_query": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"event_name\", \"T1\".\"location\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T2\".\"remaining\" > 0",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1448,
    "difficulty": "challenging",
    "question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
    "evidence": "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100",
    "SQLite_query": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
    "Postgres_query": "SELECT \"T1\".\"event_name\", \"T1\".\"event_date\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" WHERE \"T3\".\"expense_description\" = 'Pizza' AND \"T3\".\"cost\" > 50 AND \"T3\".\"cost\" < 100",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1449,
    "difficulty": "moderate",
    "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
    "evidence": "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100",
    "SQLite_query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "Postgres_query": "SELECT DISTINCT \"T1\".\"first_name\", \"T1\".\"last_name\", \"T2\".\"major_name\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" INNER JOIN \"expense\" AS \"T3\" ON \"T1\".\"member_id\" = \"T3\".\"link_to_member\" WHERE \"T3\".\"cost\" > 100",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1450,
    "difficulty": "simple",
    "question": "In the events with more than forty incomes, list the city and country in which the event is happening.",
    "evidence": "more than fifty incomes refers to income > 40",
    "SQLite_query": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
    "Postgres_query": "SELECT DISTINCT \"T3\".\"city\", \"T3\".\"county\" FROM income AS \"T1\" INNER JOIN member AS \"T2\" ON \"T1\".\"link_to_member\" = \"T2\".\"member_id\" INNER JOIN zip_code AS \"T3\" ON \"T3\".\"zip_code\" = \"T2\".\"zip\" WHERE \"T1\".\"amount\" > 40",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1451,
    "difficulty": "challenging",
    "question": "Among the members who incurred expenses in more than one event, who paid the most amount?",
    "evidence": "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)",
    "SQLite_query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"member_id\" FROM expense AS \"T1\" INNER JOIN member AS \"T2\" ON \"T1\".\"link_to_member\" = \"T2\".\"member_id\" INNER JOIN budget AS \"T3\" ON \"T1\".\"link_to_budget\" = \"T3\".\"budget_id\" INNER JOIN event AS \"T4\" ON \"T3\".\"link_to_event\" = \"T4\".\"event_id\" GROUP BY \"T2\".\"member_id\" HAVING COUNT(DISTINCT \"T4\".\"event_id\") > 1 ORDER BY SUM(\"T1\".\"cost\") DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1452,
    "difficulty": "moderate",
    "question": "What is the average amount paid by students in a position other than a member?",
    "evidence": "position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))",
    "SQLite_query": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
    "Postgres_query": "SELECT AVG(\"T1\".\"cost\") FROM \"expense\" AS \"T1\" INNER JOIN \"member\" as \"T2\" ON \"T1\".\"link_to_member\" = \"T2\".\"member_id\" WHERE \"T2\".\"position\" != 'Member'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1453,
    "difficulty": "moderate",
    "question": "List the name of events with less than average parking cost.",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "SQLite_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "Postgres_query": "SELECT \"T1\".\"event_name\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\" WHERE \"T2\".\"category\" = 'Parking' AND \"T3\".\"cost\" < (SELECT AVG(\"cost\") FROM \"expense\")",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1454,
    "difficulty": "moderate",
    "question": "What is the percentage of the cost for the game events?",
    "evidence": "game events refers to type = 'Game'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100",
    "SQLite_query": "SELECT SUM(CASE WHEN T1.type = 'Game' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "Postgres_query": "SELECT SUM(CASE WHEN \"T1\".\"type\" = 'Game' THEN \"T3\".\"cost\" ELSE 0 END) * 100.0 / SUM(\"T3\".\"cost\") FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"expense\" AS \"T3\" ON \"T2\".\"budget_id\" = \"T3\".\"link_to_budget\"",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1455,
    "difficulty": "moderate",
    "question": "Which budget allowed the most money for water, chips, and cookies?",
    "evidence": "budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)",
    "SQLite_query": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
    "Postgres_query": "SELECT \"T2\".\"budget_id\" FROM expense AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"link_to_budget\" = \"T2\".\"budget_id\" WHERE \"T1\".\"expense_description\" = 'Water, chips, cookies' ORDER BY \"T1\".\"cost\" DESC NULLS LAST LIMIT 1",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1456,
    "difficulty": "moderate",
    "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
    "evidence": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)",
    "SQLite_query": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
    "Postgres_query": "SELECT \"T3\".\"first_name\", \"T3\".\"last_name\" FROM expense AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"link_to_budget\" = \"T2\".\"budget_id\" INNER JOIN member AS \"T3\" ON \"T1\".\"link_to_member\" = \"T3\".\"member_id\" ORDER BY \"T2\".\"spent\" DESC NULLS LAST LIMIT 5",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1457,
    "difficulty": "challenging",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
    "SQLite_query": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "Postgres_query": "SELECT DISTINCT \"T3\".\"first_name\", \"T3\".\"last_name\", \"T3\".\"phone\" FROM expense AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"link_to_budget\" = \"T2\".\"budget_id\" INNER JOIN member AS \"T3\" ON \"T3\".\"member_id\" = \"T1\".\"link_to_member\" WHERE \"T1\".\"cost\" > ( SELECT AVG(\"T1\".\"cost\") FROM expense AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"link_to_budget\" = \"T2\".\"budget_id\" INNER JOIN member AS \"T3\" ON \"T3\".\"member_id\" = \"T1\".\"link_to_member\" )",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1458,
    "difficulty": "moderate",
    "question": "Calculate the difference in the percentage of members in Maine and Vermont.",
    "evidence": "SUBTRACT( DIVIDE( SUM(state = 'Maine'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
    "SQLite_query": "SELECT CAST((SUM(CASE WHEN T2.state = 'Maine' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
    "Postgres_query": "SELECT CAST(((SUM(CASE WHEN \"T2\".\"state\" = 'Maine' THEN 1 ELSE 0 END) - SUM(CASE WHEN \"T2\".\"state\" = 'Vermont' THEN 1 ELSE 0 END)) * 100.0) / COUNT(\"T1\".\"member_id\") AS diff FROM \"member\" AS \"T1\" INNER JOIN \"zip_code\" AS \"T2\" ON \"T2\".\"zip_code\" = \"T1\".\"zip\"",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1459,
    "difficulty": "simple",
    "question": "What is the major of Garrett Gerke and which department does it belong to?",
    "evidence": "major refers to major name;",
    "SQLite_query": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "Postgres_query": "SELECT \"T2\".\"major_name\", \"T2\".\"department\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" WHERE \"T1\".\"first_name\" = 'Garrett' AND \"T1\".\"last_name\" = 'Gerke'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1460,
    "difficulty": "challenging",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
    "SQLite_query": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "Postgres_query": "SELECT \"T2\".\"first_name\", \"T2\".\"last_name\", \"T1\".\"cost\" FROM expense AS \"T1\" INNER JOIN member AS \"T2\" ON \"T1\".\"link_to_member\" = \"T2\".\"member_id\" WHERE \"T1\".\"expense_description\" = 'Water, Veggie tray, supplies'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1461,
    "difficulty": "simple",
    "question": "List the last names of students under the Elementary Education major and include their phone numbers.",
    "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
    "SQLite_query": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
    "Postgres_query": "SELECT \"T1\".\"last_name\", \"T1\".\"phone\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" WHERE \"T2\".\"major_name\" = 'Elementary Education'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1462,
    "difficulty": "simple",
    "question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "SQLite_query": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "Postgres_query": "SELECT \"T2\".\"category\", \"T2\".\"amount\" FROM event AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T1\".\"event_name\" = 'January Speaker'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1463,
    "difficulty": "simple",
    "question": "List the event names which were budgeted for the food.",
    "evidence": "budgeted for food refers to category = 'Food'",
    "SQLite_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "Postgres_query": "SELECT \"T1\".\"event_name\" FROM \"event\" AS \"T1\" INNER JOIN \"budget\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" WHERE \"T2\".\"category\" = 'Food'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1464,
    "difficulty": "challenging",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "evidence": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
    "SQLite_query": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "Postgres_query": "SELECT DISTINCT \"T3\".\"first_name\", \"T3\".\"last_name\", \"T4\".\"amount\" FROM \"event\" AS \"T1\" INNER JOIN \"attendance\" AS \"T2\" ON \"T1\".\"event_id\" = \"T2\".\"link_to_event\" INNER JOIN \"member\" AS \"T3\" ON \"T3\".\"member_id\" = \"T2\".\"link_to_member\" INNER JOIN \"income\" AS \"T4\" ON \"T4\".\"link_to_member\" = \"T3\".\"member_id\" WHERE \"T4\".\"date_received\" = '2019-09-09'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1465,
    "difficulty": "simple",
    "question": "Which budget category does the expense 'Posters' fall to?",
    "evidence": "'Posters' refers to expense description",
    "SQLite_query": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "Postgres_query": "SELECT DISTINCT \"T2\".\"category\" FROM expense AS \"T1\" INNER JOIN budget AS \"T2\" ON \"T1\".\"link_to_budget\" = \"T2\".\"budget_id\" WHERE \"T1\".\"expense_description\" = 'Posters'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1466,
    "difficulty": "simple",
    "question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "evidence": "full name refers to first_name, last name",
    "SQLite_query": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\", \"college\" FROM \"member\" AS \"T1\" INNER JOIN \"major\" AS \"T2\" ON \"T2\".\"major_id\" = \"T1\".\"link_to_major\" WHERE \"T1\".\"position\" = 'Secretary'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1467,
    "difficulty": "simple",
    "question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "SQLite_query": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts'",
    "Postgres_query": "SELECT SUM(\"T1\".\"spent\"), \"T2\".\"event_name\" FROM \"budget\" AS \"T1\" INNER JOIN \"event\" AS \"T2\" ON \"T1\".\"link_to_event\" = \"T2\".\"event_id\" WHERE \"T1\".\"category\" = 'Speaker Gifts'",
    "result_matched": false
  },
  {
    "db_id": "student_club",
    "question_id": 1468,
    "difficulty": "simple",
    "question": "Where is the hometown of Garrett Girke?",
    "evidence": "hometown refers to city",
    "SQLite_query": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "Postgres_query": "SELECT \"T2\".\"city\" FROM \"member\" AS \"T1\" INNER JOIN \"zip_code\" AS \"T2\" ON \"T2\".\"zip_code\" = \"T1\".\"zip\" WHERE \"T1\".\"first_name\" = 'Garrett' AND \"T1\".\"last_name\" = 'Gerke'",
    "result_matched": true
  },
  {
    "db_id": "student_club",
    "question_id": 1469,
    "difficulty": "moderate",
    "question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.",
    "evidence": "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'",
    "SQLite_query": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
    "Postgres_query": "SELECT \"T1\".\"first_name\", \"T1\".\"last_name\", \"T1\".\"position\" FROM \"member\" AS \"T1\" INNER JOIN \"zip_code\" AS \"T2\" ON \"T2\".\"zip_code\" = \"T1\".\"zip\" WHERE \"T2\".\"city\" = 'Lincolnton' AND \"T2\".\"state\" = 'North Carolina' AND \"T2\".\"zip_code\" = 28092",
    "result_matched": true
  }
]